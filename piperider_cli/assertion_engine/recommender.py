import inspect
from typing import Callable, List, Dict

from piperider_cli import yaml as pyml

from .recommended_rules import RecommendedAssertion, RecommendedRules

recommended_rule_parameter_keys = ['table', 'column', 'profiling_result']

RECOMMENDED_ASSERTION_TAG = 'RECOMMENDED'


class AssertionRecommender:
    def __init__(self):
        self.assertions: Dict[pyml.CommentedMap] = {}
        self.recommended_rule_callbacks = []
        self.load_recommended_rules()
        self.generated_assertions: List[RecommendedAssertion] = []

    def prepare_assertion_template(self, profiling_result):
        for name, table in profiling_result.get('tables', {}).items():
            # Generate template of assertions
            table_assertions = pyml.CommentedSeq()
            columns = pyml.CommentedMap()

            # Generate assertions for columns
            for col in table.get('columns', {}).keys():
                column_name = str(col)
                column_assertions = pyml.CommentedSeq()
                columns[column_name] = pyml.CommentedMap({
                    'tests': column_assertions,
                })

            # Generate assertions for table
            recommended_assertion = pyml.CommentedMap({
                name: pyml.CommentedMap({
                    'tests': table_assertions,
                    'columns': columns,
                })})
            recommended_assertion.yaml_set_start_comment(f'# Auto-generated by Piperider based on table "{name}"')
            table_level_comment = f'Test Cases for Table "{name}"'
            columns_level_comment = 'Test Cases for Columns'
            recommended_assertion[name].yaml_set_comment_before_after_key('tests', indent=2,
                                                                          before=table_level_comment)
            recommended_assertion[name].yaml_set_comment_before_after_key('columns', after_indent=4,
                                                                          after=columns_level_comment)
            self.assertions[name] = recommended_assertion
        return self.assertions

    def run(self, profiling_result) -> List[RecommendedAssertion]:
        if not self.assertions:
            self.prepare_assertion_template(profiling_result)

        for table, ta in self.assertions.items():
            table_assertions: pyml.CommentedSeq = ta[table]['tests']
            for callback in self.recommended_rule_callbacks:
                assertion: RecommendedAssertion = callback(table, None, profiling_result)
                if assertion:
                    if assertion.name:
                        table_assertions.append(pyml.CommentedMap({
                            'name': assertion.name,
                            'assert': pyml.CommentedMap(assertion.asserts),
                            'tags': [RECOMMENDED_ASSERTION_TAG]
                        }))
                    else:
                        table_assertions.append(pyml.CommentedMap({
                            'metric': assertion.metric,
                            'assert': pyml.CommentedMap(assertion.asserts),
                            'tags': [RECOMMENDED_ASSERTION_TAG]
                        }))
                    assertion.table = table
                    self.generated_assertions.append(assertion)
            for column, col in ta[table]['columns'].items():
                column_assertions = col['tests']
                for callback in self.recommended_rule_callbacks:
                    assertion: RecommendedAssertion = callback(table, column, profiling_result)
                    if not assertion:
                        continue

                    assertion.table = table
                    assertion.column = column
                    if assertion.asserts:
                        column_assertions.append(pyml.CommentedMap({
                            'name': assertion.name,
                            'assert': pyml.CommentedMap(assertion.asserts),
                            'tags': [RECOMMENDED_ASSERTION_TAG]
                        }))
                    else:
                        column_assertions.append(pyml.CommentedMap({
                            'name': assertion.name,
                            'tags': [RECOMMENDED_ASSERTION_TAG]
                        }))
                    self.generated_assertions.append(assertion)
        return self.generated_assertions

    def load_recommended_rules(self):
        for callback in RecommendedRules:
            if isinstance(callback, Callable):
                args = inspect.signature(callback)
                parameters = list(args.parameters.keys())
                if parameters == recommended_rule_parameter_keys:
                    self.recommended_rule_callbacks.append(callback)
                    pass
        pass
