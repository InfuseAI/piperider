{"version":3,"file":"static/js/860.f64c0e65.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/breadcrumb/dist/chakra-ui-breadcrumb.esm.js","components/SingleReport.js"],"sourcesContent":["import { createStylesContext, forwardRef, chakra, useMultiStyleConfig, omitThemingProps } from '@chakra-ui/system';\nimport { __DEV__, cx } from '@chakra-ui/utils';\nimport { getValidChildren } from '@chakra-ui/react-utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"spacing\"],\n    _excluded2 = [\"isCurrentPage\", \"as\", \"className\", \"href\"],\n    _excluded3 = [\"isCurrentPage\", \"separator\", \"isLastChild\", \"spacing\", \"children\", \"className\"],\n    _excluded4 = [\"children\", \"spacing\", \"separator\", \"className\"];\n\nvar _createStylesContext = createStylesContext(\"Breadcrumb\"),\n    StylesProvider = _createStylesContext[0],\n    useStyles = _createStylesContext[1];\n\n/**\n * React component that separates each breadcrumb link\n */\nvar BreadcrumbSeparator = /*#__PURE__*/forwardRef(function (props, ref) {\n  var spacing = props.spacing,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var styles = useStyles();\n\n  var separatorStyles = _extends({\n    mx: spacing\n  }, styles.separator);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref,\n    role: \"presentation\"\n  }, rest, {\n    __css: separatorStyles\n  }));\n});\n\nif (__DEV__) {\n  BreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n}\n\n/**\n * Breadcrumb link.\n *\n * It renders a `span` when it matches the current link. Otherwise,\n * it renders an anchor tag.\n */\nvar BreadcrumbLink = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isCurrentPage = props.isCurrentPage,\n      as = props.as,\n      className = props.className,\n      href = props.href,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var styles = useStyles();\n\n  var sharedProps = _extends({\n    ref: ref,\n    as: as,\n    className: cx(\"chakra-breadcrumb__link\", className)\n  }, rest);\n\n  if (isCurrentPage) {\n    return /*#__PURE__*/React.createElement(chakra.span, _extends({\n      \"aria-current\": \"page\",\n      __css: styles.link\n    }, sharedProps));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.a, _extends({\n    __css: styles.link,\n    href: href\n  }, sharedProps));\n});\n\nif (__DEV__) {\n  BreadcrumbLink.displayName = \"BreadcrumbLink\";\n}\n\n/**\n * BreadcrumbItem is used to group a breadcrumb link.\n * It renders a `li` element to denote it belongs to an order list of links.\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\nvar BreadcrumbItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isCurrentPage = props.isCurrentPage,\n      separator = props.separator,\n      isLastChild = props.isLastChild,\n      spacing = props.spacing,\n      children = props.children,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    if (child.type === BreadcrumbLink) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        isCurrentPage: isCurrentPage\n      });\n    }\n\n    if (child.type === BreadcrumbSeparator) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        spacing: spacing,\n        children: child.props.children || separator\n      });\n    }\n\n    return child;\n  });\n  var styles = useStyles();\n\n  var itemStyles = _extends({\n    display: \"inline-flex\",\n    alignItems: \"center\"\n  }, styles.item);\n\n  var _className = cx(\"chakra-breadcrumb__list-item\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: itemStyles\n  }), clones, !isLastChild && /*#__PURE__*/React.createElement(BreadcrumbSeparator, {\n    spacing: spacing\n  }, separator));\n});\n\nif (__DEV__) {\n  BreadcrumbItem.displayName = \"BreadcrumbItem\";\n}\n\n/**\n * Breadcrumb is used to render a breadcrumb navigation landmark.\n * It renders a `nav` element with `aria-label` set to `Breadcrumb`\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\nvar Breadcrumb = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Breadcrumb\", props);\n  var ownProps = omitThemingProps(props);\n\n  var children = ownProps.children,\n      _ownProps$spacing = ownProps.spacing,\n      spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n      _ownProps$separator = ownProps.separator,\n      separator = _ownProps$separator === void 0 ? \"/\" : _ownProps$separator,\n      className = ownProps.className,\n      rest = _objectWithoutPropertiesLoose(ownProps, _excluded4);\n\n  var validChildren = getValidChildren(children);\n  var count = validChildren.length;\n  var clones = validChildren.map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      separator: separator,\n      spacing: spacing,\n      isLastChild: count === index + 1\n    });\n  });\n\n  var _className = cx(\"chakra-breadcrumb\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.nav, _extends({\n    ref: ref,\n    \"aria-label\": \"breadcrumb\",\n    className: _className,\n    __css: styles.container\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.ol, {\n    className: \"chakra-breadcrumb__list\"\n  }, clones)));\n});\n\nif (__DEV__) {\n  Breadcrumb.displayName = \"Breadcrumb\";\n}\n\nexport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbSeparator };\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  Code,\n  Divider,\n  Flex,\n  Grid,\n  Heading,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport { useEffect, useRef } from 'react';\nimport { format } from 'date-fns';\nimport { Link } from 'wouter';\n\nimport { Main } from './Main';\nimport {\n  getReportAsserationStatusCounts,\n  drawSingleReportChart,\n} from '../utils';\nimport { useDocumentTitle } from '../hooks/useDocumentTitle';\n\nexport default function SingleReport({ source, data, reportName }) {\n  useDocumentTitle(reportName);\n\n  if (!data) {\n    return (\n      <Main>\n        <Flex justifyContent=\"center\" alignItems=\"center\" minHeight={'100vh'}>\n          No profile data found.\n        </Flex>\n      </Main>\n    );\n  }\n\n  const assertion = data.assertion_results;\n  const overviewStatus = getReportAsserationStatusCounts(assertion);\n\n  return (\n    <Main alignItems={'flex-start'}>\n      <Flex direction={'column'} minH={'100vh'} width={'100%'}>\n        <Flex mx={'10%'} mt={4}>\n          <Breadcrumb fontSize=\"lg\">\n            <BreadcrumbItem>\n              <Link href=\"/\">\n                <BreadcrumbLink href=\"/\">{source.name}</BreadcrumbLink>\n              </Link>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem isCurrentPage>\n              <BreadcrumbLink href=\"#\">{data.name}</BreadcrumbLink>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Flex>\n\n        <Flex\n          border={'1px solid'}\n          borderColor={'gray.300'}\n          bg={'white'}\n          borderRadius={'md'}\n          p={6}\n          mt={3}\n          mx={'10%'}\n          direction={'column'}\n        >\n          <Flex direction={'column'} gap={4}>\n            <Heading size={'lg'}>Overview</Heading>\n            <Text>\n              Table:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {data.name}\n              </Text>\n            </Text>\n            <Text>\n              Rows:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {data.row_count}\n              </Text>\n            </Text>\n            <Text>\n              Columns:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {data.col_count}\n              </Text>\n            </Text>\n            <Text>\n              Test Status:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {overviewStatus.passed}\n              </Text>{' '}\n              Passed,{' '}\n              <Text\n                as={'span'}\n                fontWeight={700}\n                color={overviewStatus.failed > 0 ? 'red.500' : 'inherit'}\n              >\n                {overviewStatus.failed}\n              </Text>{' '}\n              Failed\n            </Text>\n\n            <Text>\n              Data Source Type:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {source.type}\n              </Text>\n            </Text>\n            <Text>\n              Created Date:{' '}\n              <Text as={'span'} fontWeight={700}>\n                {data?.created_at &&\n                  format(new Date(data.created_at), 'yyyy/MM/dd HH:mm:ss')}\n              </Text>\n            </Text>\n            <Text>\n              Freshness:{' '}\n              <Text as={'span'} fontWeight={700}>\n                Not applicable\n              </Text>\n            </Text>\n          </Flex>\n\n          <Divider my={6} />\n\n          <Flex direction={'column'}>\n            <TestsInformation\n              tableName={data.name}\n              data={data.assertion_results}\n            />\n\n            <ProfilingInformation data={data.columns} />\n          </Flex>\n        </Flex>\n      </Flex>\n    </Main>\n  );\n}\n\nfunction ProfilingInformation({ data }) {\n  return (\n    <Flex direction={'column'} gap={4} mt={4}>\n      <Heading size={'lg'}>Profiling</Heading>\n\n      {Object.keys(data).map((key) => {\n        const column = data[key];\n        const distribution = column.distribution;\n        const isAllValuesExists = column.non_nulls === column.total;\n\n        return (\n          <Flex key={key} direction={'column'} px={4}>\n            <Grid my={4} templateColumns=\"300px 1fr\" gap={4}>\n              <Flex direction={'column'} gap={2}>\n                <Text>\n                  <Text\n                    as={'span'}\n                    fontWeight={700}\n                    color={'gray.900'}\n                    fontSize={'xl'}\n                    mr={1}\n                  >\n                    {column.name}\n                  </Text>\n                  {''}(<Code>{column.type}</Code>)\n                </Text>\n\n                <Flex direction=\"column\">\n                  <Flex justifyContent=\"space-between\">\n                    <Text fontWeight={700}>Total:</Text>\n                    <Text>{column.total}</Text>\n                  </Flex>\n\n                  <Flex justifyContent=\"space-between\">\n                    <Text fontWeight={700}>Missing:</Text>\n                    <Text color={isAllValuesExists ? 'green.500' : 'red.500'}>\n                      {isAllValuesExists\n                        ? '0'\n                        : (\n                            Number(\n                              (column.total - column.non_nulls) / column.total,\n                            ) * 100\n                          ).toFixed(3)}\n                      %\n                    </Text>\n                  </Flex>\n\n                  <Flex justifyContent=\"space-between\">\n                    <Text fontWeight={700}>Distinct:</Text>\n                    <Text>{column.distinct}</Text>\n                  </Flex>\n                </Flex>\n\n                {column.type === 'numeric' && (\n                  <Flex direction=\"column\">\n                    <Flex justifyContent=\"space-between\">\n                      <Text fontWeight={700}>Min:</Text>\n                      <Text>{Number(column.min).toFixed(3)}</Text>\n                    </Flex>\n\n                    <Flex justifyContent=\"space-between\">\n                      <Text fontWeight={700}>Max:</Text>\n                      <Text>{Number(column.max).toFixed(3)}</Text>\n                    </Flex>\n\n                    <Flex justifyContent=\"space-between\">\n                      <Text fontWeight={700}>Avg:</Text>\n                      <Text>{Number(column.avg).toFixed(3)}</Text>\n                    </Flex>\n                  </Flex>\n                )}\n\n                {column.type === 'datetime' && (\n                  <Flex direction=\"column\">\n                    <Flex justifyContent=\"space-between\">\n                      <Text fontWeight={700}>Min:</Text>\n                      <Text>{column.min}</Text>\n                    </Flex>\n\n                    <Flex justifyContent=\"space-between\">\n                      <Text fontWeight={700}>Max:</Text>\n                      <Text>{column.max}</Text>\n                    </Flex>\n                  </Flex>\n                )}\n              </Flex>\n\n              <Flex mt={8}>\n                {distribution ? (\n                  <BarChart\n                    data={distribution.labels.map((label, i) => ({\n                      label,\n                      value: distribution.counts[i],\n                      total: column.total,\n                    }))}\n                  />\n                ) : (\n                  <BarChart data={[]} />\n                )}\n              </Flex>\n            </Grid>\n\n            <Divider my={4} />\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n}\n\nfunction TestsInformation({ tableName, data }) {\n  const tabelTests = data?.tests || [];\n  const columnsTests = data?.columns || {};\n\n  return (\n    <Flex direction={'column'} gap={4}>\n      <Heading size={'lg'}>Tests</Heading>\n\n      <TableContainer>\n        <Table variant={'simple'}>\n          <Thead>\n            <Tr>\n              <Th>Name</Th>\n              <Th>Status</Th>\n              <Th>Level</Th>\n              <Th>Assertion</Th>\n              <Th>Expected</Th>\n              <Th>Actual</Th>\n            </Tr>\n          </Thead>\n\n          <Tbody>\n            {tabelTests.map((tabelTest) => {\n              const isFailed = tabelTest.status === 'failed';\n\n              return (\n                <Tr key={tabelTest.name}>\n                  <Td>\n                    <Text as={'span'} fontWeight={700}>\n                      {tableName}\n                    </Text>{' '}\n                  </Td>\n                  <Td>\n                    {isFailed ? (\n                      <Text as=\"span\" role={'img'}>\n                        ❌\n                      </Text>\n                    ) : (\n                      <Text as=\"span\" role={'img'}>\n                        ✅\n                      </Text>\n                    )}\n                  </Td>\n                  <Td>Table</Td>\n                  <Td>{tabelTest.name.replace('assert_', '')}</Td>\n                  <Td>\n                    {typeof tabelTest.expected === 'object'\n                      ? Object.keys(tabelTest.expected).map((key) => (\n                          <Text key={key}>\n                            {typeof tabelTest.expected[key] === 'string'\n                              ? tabelTest.expected[key]\n                              : JSON.stringify(tabelTest.expected[key])}\n                          </Text>\n                        ))\n                      : tabelTest.expected}\n                  </Td>\n                  <Td color={isFailed && 'red.500'}>\n                    {typeof tabelTest.actual === 'object'\n                      ? Object.keys(tabelTest.actual).map((key) => (\n                          <Text key={key}>\n                            {typeof tabelTest.actual[key] === 'string'\n                              ? tabelTest.actual[key]\n                              : JSON.stringify(tabelTest.actual[key])}\n                          </Text>\n                        ))\n                      : tabelTest.actual}\n                  </Td>\n                </Tr>\n              );\n            })}\n\n            {Object.keys(columnsTests).map((key) => {\n              const columnTests = columnsTests[key];\n\n              return columnTests.map((columnTest) => {\n                const isFailed = columnTest.status === 'failed';\n\n                return (\n                  <Tr key={columnTest.name}>\n                    <Td>\n                      <Text as={'span'} fontWeight={700}>\n                        {key}\n                      </Text>{' '}\n                    </Td>\n                    <Td>\n                      {isFailed ? (\n                        <Text as=\"span\" role={'img'}>\n                          ❌\n                        </Text>\n                      ) : (\n                        <Text as=\"span\" role={'img'}>\n                          ✅\n                        </Text>\n                      )}\n                    </Td>\n                    <Td>Column</Td>\n                    <Td>{columnTest.name.replace('assert_', '')}</Td>\n                    <Td>\n                      {typeof columnTest.expected === 'object'\n                        ? Object.keys(columnTest.expected).map((key) => (\n                            <Text key={key}>\n                              {typeof columnTest.expected[key] === 'string'\n                                ? columnTest.expected[key]\n                                : JSON.stringify(columnTest.expected[key])}\n                            </Text>\n                          ))\n                        : columnTest.expected}\n                    </Td>\n                    <Td color={isFailed && 'red.500'}>\n                      {typeof columnTest.actual === 'object'\n                        ? Object.keys(columnTest.actual).map((key) => (\n                            <Text key={key}>\n                              {typeof columnTest.actual[key] === 'string'\n                                ? columnTest.actual[key]\n                                : JSON.stringify(columnTest.actual[key])}\n                            </Text>\n                          ))\n                        : columnTest.actual}\n                    </Td>\n                  </Tr>\n                );\n              });\n            })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </Flex>\n  );\n}\n\nfunction BarChart({ data }) {\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (data.length > 0) {\n      drawSingleReportChart({\n        containerWidth: containerRef.current.getBoundingClientRect().width,\n        containerHeight: containerRef.current.getBoundingClientRect().height,\n        svgTarget: svgRef.current,\n        tooltipTarget: '.chart',\n        data,\n      });\n    }\n  }, [data]);\n\n  return (\n    <Flex className=\"chart\" width=\"100%\" ref={containerRef}>\n      <svg ref={svgRef} />\n    </Flex>\n  );\n}\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_excluded","_excluded2","_excluded3","_excluded4","_createStylesContext","createStylesContext","StylesProvider","useStyles","BreadcrumbSeparator","forwardRef","props","ref","spacing","rest","separatorStyles","mx","separator","React","chakra","role","__css","__DEV__","displayName","BreadcrumbLink","isCurrentPage","as","className","href","styles","sharedProps","cx","link","BreadcrumbItem","isLastChild","children","clones","getValidChildren","map","child","type","itemStyles","display","alignItems","item","_className","Breadcrumb","useMultiStyleConfig","ownProps","omitThemingProps","_ownProps$spacing","_ownProps$separator","validChildren","count","index","container","value","SingleReport","data","reportName","useDocumentTitle","Main","justifyContent","minHeight","assertion","assertion_results","overviewStatus","getReportAsserationStatusCounts","direction","minH","width","mt","fontSize","name","border","borderColor","bg","borderRadius","p","gap","size","fontWeight","row_count","col_count","passed","color","failed","created_at","format","Date","my","TestsInformation","tableName","ProfilingInformation","columns","column","distribution","isAllValuesExists","non_nulls","total","px","templateColumns","mr","Number","toFixed","distinct","min","max","avg","BarChart","labels","label","counts","tabelTests","tests","columnsTests","variant","Tr","Th","tabelTest","isFailed","status","Td","replace","expected","JSON","stringify","actual","columnTest","svgRef","useRef","containerRef","useEffect","drawSingleReportChart","containerWidth","current","getBoundingClientRect","containerHeight","height","svgTarget","tooltipTarget"],"sourceRoot":""}