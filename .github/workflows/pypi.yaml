# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Release to PyPI

on:
  push:
    tags: 'v*'


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests
        run: |
          make test
      - name: Release
        id: release_pypi
        run: |
          # get version from GITHUB_REF
          # input: "refs/tags/v0.1.0"
          # output: "0.1.0"

          # update version number
          echo "${GITHUB_REF:11}" > ./piperider_cli/VERSION
          echo "::set-output name=version::$(cat piperider_cli/VERSION)"
          # put config includes tracking api key
          echo "$CONFIG" > ./piperider_cli/data/CONFIG

          # set sentry environment
          if [[ "$(cat piperider_cli/VERSION)" == *"a"* ]]; then
            echo "::set-output name=sentry_env::alpha"
          elif [[ "$(cat piperider_cli/VERSION)" == *"b"* ]]; then
            echo "::set-output name=sentry_env::beta"
          elif [[ "$(cat piperider_cli/VERSION)" == *"rc"* ]]; then
            echo "::set-output name=sentry_env::release-candidate"
          else
            echo "::set-output name=sentry_env::production"
          fi

          # generate pypirc
          echo "$PYPIRC" > $HOME/.pypirc

          # release to PyPI
          make release
        env:
          PYPIRC: ${{ secrets.PYPI }}
          CONFIG: ${{ secrets.CONFIG }}
      - name: Mark Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: infuseai
          SENTRY_PROJECT: piperider
        with:
          environment: ${{ steps.release_pypi.outputs.sentry_env || 'production' }}
          ignore_empty: true
          ignore_missing: true
          version: ${{ steps.release_pypi.outputs.version }}
      - name: Notify release to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "text": ":chai_dog::chai_dog::chai_dog:*PipeRider Release*:chai_dog::chai_dog::chai_dog:\n*Version*: ${{ steps.release_pypi.outputs.version }}\n*GitHub Release*: <https://github.com/InfuseAI/piperider/releases/tag/v${{ steps.release_pypi.outputs.version }}|v${{ steps.release_pypi.outputs.version }}>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_API_TOKEN }}
    outputs:
      piperider_version: ${{ steps.release_pypi.outputs.version }}
      sentry_env: ${{ steps.release_pypi.outputs.sentry_env || 'production' }}

  deploy-docker:
    runs-on: ubuntu-latest
    needs: [ build ]
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Sleep for 30 seconds
        run: |
          sleep 30

      - name: Build & deploy Docker images
        run: |
          echo "Build & deploy Docker images: piperider:$VERSION"
          make docker-deploy VERSION=$VERSION
          if [ "$SENTRY_ENV" == "production" ]; then
            echo "Set piperider:$VERSION as piperider:latest"
            make deploy-deploy-latest VERSION=$VERSION
          fi
        env:
          VERSION: ${{ needs.build.outputs.piperider_version }}
          SENTRY_ENV: ${{ needs.build.outputs.sentry_env }}
