/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SingleReportSchema {
  tables: {
    [k: string]: TableSchema;
  };
  metrics?: BusinessMetric[];
  tests?: AssertionTest[];
  dbt?: {
    [k: string]: unknown;
  };
  id: string;
  project_id?: string;
  user_id?: string;
  version?: string;
  metadata_version?: string;
  created_at: string;
  datasource: DataSource;
  cloud?: Cloud;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".+".
 */
export interface TableSchema {
  name: string;
  description?: string;
  /**
   * The reference unique id to the dbt resource
   */
  ref_id?: string;
  /**
   * Number of rows in this table
   */
  row_count?: number;
  /**
   * Number of rows that have identical values across corresponding columns in this table
   */
  duplicate_rows?: number;
  /**
   * Percentage of rows that have identical values across corresponding columns in this table
   */
  duplicate_rows_p?: number;
  /**
   * Number of rows after applying the row-limit configuration (rows will be unaffected if none is set)
   */
  samples?: number;
  /**
   * Percentage of rows after applying the row-limit configuration (rows will be unaffected if none is set)
   */
  samples_p?: number;
  /**
   * The time that this table created at in ISO 8601 format including time zone
   */
  created?: string;
  /**
   * The last time that this table modified at in ISO 8601 format including time zone
   */
  last_altered?: string;
  /**
   * The volume size of this table in bytes
   */
  bytes?: number;
  /**
   * Time differentiation between the current time and table's last altered time
   */
  freshness?: number;
  /**
   * Number of columns in this table
   */
  col_count?: number;
  columns: {
    [k: string]: ColumnSchema;
  };
  profile_duration?: string;
  elapsed_milli?: number;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".+".
 */
export interface ColumnSchema {
  /**
   * The total count of values, regardless of validity
   */
  total?: number;
  /**
   * Number of rows after applying the row-limit configuration (rows will be unaffected if none is set
   */
  samples?: number;
  /**
   * Percentage of rows after applying the row-limit configuration (rows will be unaffected if none is set
   */
  samples_p?: number;
  /**
   * The count of values that are null type
   */
  nulls?: number;
  /**
   * The percentage of values that are null type
   */
  nulls_p?: number;
  /**
   * The count of non null values
   */
  non_nulls?: number;
  /**
   * The percentage of non null values
   */
  non_nulls_p?: number;
  /**
   * The count of distinct kinds of values (e.g. [a,b,c,c] => [a,b,c])
   */
  distinct?: number;
  /**
   * The percentage of distinct kinds of values (e.g. [a,b,c,c] => [a,b,c])
   */
  distinct_p?: number;
  /**
   * The count of values that are recurring (e.g. [a,b,c,c] => [c,c])
   */
  duplicates?: number;
  /**
   * The percentage of values that are recurring (e.g. [a,b,c,c] => [c,c])
   */
  duplicates_p?: number;
  /**
   * The count of values that are non-recurring (e.g. [a,b,c,c] => [a,b])
   */
  non_duplicates?: number;
  /**
   * The percentage of values that are non-recurring (e.g. [a,b,c,c] => [a,b])
   */
  non_duplicates_p?: number;
  histogram?: Histogram;
  histogram_length?: Histogram;
  topk?: Topk;
  /**
   * Name of this column
   */
  name: string;
  /**
   * Descriptor of this column
   */
  description?: string;
  /**
   * Generic types of schema, python-based
   */
  type: 'string' | 'numeric' | 'integer' | 'datetime' | 'boolean' | 'other';
  /**
   * The column type definition in SQL database
   */
  schema_type: string;
  /**
   * The count of values that are non-null and not invalid
   */
  valids?: number;
  /**
   * The percentage of values that are non-null and not invalid
   */
  valids_p?: number;
  /**
   * The count of values that don't match the schema type. For example, a string in a numeric column.
   */
  invalids?: number;
  /**
   * The percentage of values that don't match the schema type. For example, a string in a numeric column.
   */
  invalids_p?: number;
  /**
   * The count of numerical values that equal zero exactly
   */
  zeros?: number;
  /**
   * The percentage of numerical values that equal zero exactly
   */
  zeros_p?: number;
  /**
   * The count of numerical values that are less than zero
   */
  negatives?: number;
  /**
   * The percentage of numerical values that are less than zero
   */
  negatives_p?: number;
  /**
   * The count of numerical values that are more than zero
   */
  positives?: number;
  /**
   * The percentage of numerical values that are more than zero
   */
  positives_p?: number;
  /**
   * The count of string values with zero lengths exactly
   */
  zero_length?: number;
  /**
   * The percentage of string values with zero lengths exactly
   */
  zero_length_p?: number;
  /**
   * The count of string values with non-zero lengths
   */
  non_zero_length?: number;
  /**
   * The percentage of string values with non-zero lengths
   */
  non_zero_length_p?: number;
  /**
   * The count of boolean true values
   */
  trues?: number;
  /**
   * The percentage of boolean true values
   */
  trues_p?: number;
  /**
   * The count of boolean false values
   */
  falses?: number;
  /**
   * The percentage of boolean false values
   */
  falses_p?: number;
  profile_duration?: string;
  elapsed_milli?: number;
  /**
   * The sum of a column's values
   */
  sum?: string | number;
  /**
   * The average of a column's values
   */
  avg?: string | number;
  /**
   * The average text length of a string column
   */
  avg_length?: number;
  /**
   * The standard deviation of a column's values
   */
  stddev?: string | number;
  /**
   * The standard deviation of text length of a string column
   */
  stddev_length?: number;
  /**
   * The minimum value of a column's range
   */
  min?: string | number;
  /**
   * The minimum length of a string column
   */
  min_length?: number;
  /**
   * The maximum value of a column's range
   */
  max?: string | number;
  /**
   * The maximum length of a string column
   */
  max_length?: number;
  /**
   * The quantile value of the dataset (5th percentile)
   */
  p5?: number;
  /**
   * The quantile value of the dataset (25th percentile)
   */
  p25?: number;
  /**
   * The quantile value of the dataset (50th percentile)
   */
  p50?: number;
  /**
   * The quantile value of the dataset (75th percentile)
   */
  p75?: number;
  /**
   * The quantile value of the dataset (95th percentile)
   */
  p95?: number;
}
export interface Histogram {
  labels: (string | null)[];
  counts: number[];
  bin_edges: (number | string)[];
}
/**
 * The most common or frequent value
 */
export interface Topk {
  values: (string | number)[];
  counts: number[];
}
export interface BusinessMetric {
  /**
   * Name of the business metric with time grain
   */
  name: string;
  /**
   * A short for name of the business metric with time grain
   */
  label: string;
  /**
   * The reference unique id to the dbt metric
   */
  ref_id?: string;
  /**
   * Long form, human-readable description for the business metric
   */
  description: string | null;
  /**
   * The time grain that the metric was evaluated
   */
  grain: string | null;
  /**
   * The list of dimensions to group the business metric
   */
  dimensions: string[];
  /**
   * The header names for queried row of the business metric
   */
  headers: string[];
  /**
   * Lists of row results of the business metric
   */
  data: (string | number | null)[][];
}
export interface AssertionTest {
  id: string;
  name?: string;
  metric?: string | null;
  table: string | null;
  column: string | null;
  tags: string[];
  status: 'passed' | 'failed';
  expected?: unknown;
  actual?: unknown;
  message: string | null;
  display_name: string;
  source: string;
}
export interface DataSource {
  name: string;
  type: string;
}
export interface Cloud {
  [k: string]: unknown;
}
