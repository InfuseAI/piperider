{
  "tables": {
    "customers": {
      "name": "customers",
      "row_count": 10,
      "samples": 10,
      "samples_p": 1,
      "col_count": 7,
      "columns": {
        "customer_id": {
          "name": "customer_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 10,
          "positives_p": 1.0,
          "distinct": 10,
          "distinct_p": 1.0,
          "min": 1,
          "max": 10,
          "sum": 55.0,
          "avg": 5.5,
          "stddev": 3.0276503540974917,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 10,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ],
            "bin_edges": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ]
          },
          "p5": 1,
          "p25": 3,
          "p50": 5,
          "p75": 8,
          "p95": 10,
          "topk": {
            "values": [
              "9",
              "3",
              "5",
              "4",
              "10",
              "6",
              "2",
              "7",
              "1",
              "8"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.03",
          "elapsed_milli": 32,
          "description": "This is a unique identifier for a customer"
        },
        "first_name": {
          "name": "first_name",
          "type": "string",
          "schema_type": "TEXT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 10,
          "non_zero_length_p": 1.0,
          "distinct": 10,
          "distinct_p": 1.0,
          "min": 5,
          "min_length": 5,
          "max": 9,
          "max_length": 9,
          "avg": 6.3,
          "avg_length": 6.3,
          "stddev": 1.5670212364724212,
          "stddev_length": 1.5670212364724212,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 10,
          "non_duplicates_p": 1.0,
          "topk": {
            "values": [
              "Michael",
              "Henry",
              "Martin",
              "Frank",
              "Jennifer",
              "Kathleen",
              "Shawn",
              "Sarah",
              "Jimmy",
              "Katherine"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "histogram": {
            "labels": [
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "counts": [
              5,
              1,
              1,
              2,
              1
            ],
            "bin_edges": [
              5,
              6,
              7,
              8,
              9,
              10
            ]
          },
          "histogram_length": {
            "labels": [
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "counts": [
              5,
              1,
              1,
              2,
              1
            ],
            "bin_edges": [
              5,
              6,
              7,
              8,
              9,
              10
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 7,
          "description": "Customer's first name. PII."
        },
        "last_name": {
          "name": "last_name",
          "type": "string",
          "schema_type": "TEXT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 10,
          "non_zero_length_p": 1.0,
          "distinct": 6,
          "distinct_p": 0.6,
          "min": 2,
          "min_length": 2,
          "max": 2,
          "max_length": 2,
          "avg": 2.0,
          "avg_length": 2.0,
          "stddev": 0.0,
          "stddev_length": 0.0,
          "duplicates": 7,
          "duplicates_p": 0.7,
          "non_duplicates": 3,
          "non_duplicates_p": 0.3,
          "topk": {
            "values": [
              "R.",
              "M.",
              "P.",
              "C.",
              "F.",
              "W."
            ],
            "counts": [
              3,
              2,
              2,
              1,
              1,
              1
            ]
          },
          "histogram": {
            "labels": [
              "2"
            ],
            "counts": [
              10
            ],
            "bin_edges": [
              2,
              3
            ]
          },
          "histogram_length": {
            "labels": [
              "2"
            ],
            "counts": [
              10
            ],
            "bin_edges": [
              2,
              3
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 12,
          "description": "Customer's last name. PII."
        },
        "first_order": {
          "name": "first_order",
          "type": "datetime",
          "schema_type": "DATE",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 7,
          "non_nulls_p": 0.7,
          "nulls": 3,
          "nulls_p": 0.3,
          "valids": 7,
          "valids_p": 0.7,
          "invalids": 0,
          "invalids_p": 0.0,
          "distinct": 7,
          "distinct_p": 1.0,
          "min": "2018-01-01",
          "max": "2018-03-17",
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 7,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "2018-01-01 - 2018-02-01",
              "2018-02-01 - 2018-03-01",
              "2018-03-01 - 2018-04-01"
            ],
            "counts": [
              5,
              1,
              1
            ],
            "bin_edges": [
              "2018-01-01",
              "2018-02-01",
              "2018-03-01",
              "2018-04-01"
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 8,
          "description": "Date (UTC) of a customer's first order"
        },
        "most_recent_order": {
          "name": "most_recent_order",
          "type": "datetime",
          "schema_type": "DATE",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 7,
          "non_nulls_p": 0.7,
          "nulls": 3,
          "nulls_p": 0.3,
          "valids": 7,
          "valids_p": 0.7,
          "invalids": 0,
          "invalids_p": 0.0,
          "distinct": 7,
          "distinct_p": 1.0,
          "min": "2018-01-11",
          "max": "2018-03-17",
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 7,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "2018-01-01 - 2018-02-01",
              "2018-02-01 - 2018-03-01",
              "2018-03-01 - 2018-04-01"
            ],
            "counts": [
              2,
              2,
              3
            ],
            "bin_edges": [
              "2018-01-01",
              "2018-02-01",
              "2018-03-01",
              "2018-04-01"
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 11,
          "description": "Date (UTC) of a customer's most recent order"
        },
        "number_of_orders": {
          "name": "number_of_orders",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 7,
          "non_nulls_p": 0.7,
          "nulls": 3,
          "nulls_p": 0.3,
          "valids": 7,
          "valids_p": 0.7,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 7,
          "positives_p": 0.7,
          "distinct": 3,
          "distinct_p": 0.42857142857142855,
          "min": 1,
          "max": 3,
          "sum": 11.0,
          "avg": 1.5714285714285714,
          "stddev": 0.7867957924694432,
          "duplicates": 6,
          "duplicates_p": 0.8571428571428571,
          "non_duplicates": 1,
          "non_duplicates_p": 0.14285714285714285,
          "histogram": {
            "labels": [
              "1",
              "2",
              "3"
            ],
            "counts": [
              4,
              2,
              1
            ],
            "bin_edges": [
              1,
              2,
              3,
              4
            ]
          },
          "p5": 1,
          "p25": 1,
          "p50": 1,
          "p75": 2,
          "p95": 3,
          "topk": {
            "values": [
              "1",
              "2",
              "3"
            ],
            "counts": [
              4,
              2,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 9,
          "description": "Count of the number of orders a customer has placed"
        },
        "customer_lifetime_value": {
          "name": "customer_lifetime_value",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 7,
          "non_nulls_p": 0.7,
          "nulls": 3,
          "nulls_p": 0.3,
          "valids": 7,
          "valids_p": 0.7,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 7,
          "positives_p": 0.7,
          "distinct": 7,
          "distinct_p": 1.0,
          "min": 8,
          "max": 65,
          "sum": 230.0,
          "avg": 32.857142857142854,
          "stddev": 18.031718086273898,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 7,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "8 _ 10",
              "10 _ 12",
              "12 _ 14",
              "14 _ 16",
              "16 _ 18",
              "18 _ 20",
              "20 _ 22",
              "22 _ 24",
              "24 _ 26",
              "26 _ 28",
              "28 _ 30",
              "30 _ 32",
              "32 _ 34",
              "34 _ 36",
              "36 _ 38",
              "38 _ 40",
              "40 _ 42",
              "42 _ 44",
              "44 _ 46",
              "46 _ 48",
              "48 _ 50",
              "50 _ 52",
              "52 _ 54",
              "54 _ 56",
              "56 _ 58",
              "58 _ 60",
              "60 _ 62",
              "62 _ 64",
              "64 _ 66"
            ],
            "counts": [
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1
            ],
            "bin_edges": [
              8,
              10,
              12,
              14,
              16,
              18,
              20,
              22,
              24,
              26,
              28,
              30,
              32,
              34,
              36,
              38,
              40,
              42,
              44,
              46,
              48,
              50,
              52,
              54,
              56,
              58,
              60,
              62,
              64,
              66
            ]
          },
          "p5": 8,
          "p25": 23,
          "p50": 30,
          "p75": 45,
          "p95": 65,
          "topk": {
            "values": [
              "65",
              "26",
              "30",
              "45",
              "33",
              "23",
              "8"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.02",
          "elapsed_milli": 15
        }
      },
      "profile_duration": "0.10",
      "elapsed_milli": 99,
      "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders"
    },
    "orders": {
      "name": "orders",
      "row_count": 99,
      "samples": 99,
      "samples_p": 1,
      "col_count": 9,
      "columns": {
        "order_id": {
          "name": "order_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 99,
          "positives_p": 1.0,
          "distinct": 99,
          "distinct_p": 1.0,
          "min": 1,
          "max": 99,
          "sum": 4950.0,
          "avg": 50.0,
          "stddev": 28.722813232690143,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 99,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "1 _ 3",
              "3 _ 5",
              "5 _ 7",
              "7 _ 9",
              "9 _ 11",
              "11 _ 13",
              "13 _ 15",
              "15 _ 17",
              "17 _ 19",
              "19 _ 21",
              "21 _ 23",
              "23 _ 25",
              "25 _ 27",
              "27 _ 29",
              "29 _ 31",
              "31 _ 33",
              "33 _ 35",
              "35 _ 37",
              "37 _ 39",
              "39 _ 41",
              "41 _ 43",
              "43 _ 45",
              "45 _ 47",
              "47 _ 49",
              "49 _ 51",
              "51 _ 53",
              "53 _ 55",
              "55 _ 57",
              "57 _ 59",
              "59 _ 61",
              "61 _ 63",
              "63 _ 65",
              "65 _ 67",
              "67 _ 69",
              "69 _ 71",
              "71 _ 73",
              "73 _ 75",
              "75 _ 77",
              "77 _ 79",
              "79 _ 81",
              "81 _ 83",
              "83 _ 85",
              "85 _ 87",
              "87 _ 89",
              "89 _ 91",
              "91 _ 93",
              "93 _ 95",
              "95 _ 97",
              "97 _ 99",
              "99 _ 101"
            ],
            "counts": [
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1
            ],
            "bin_edges": [
              1,
              3,
              5,
              7,
              9,
              11,
              13,
              15,
              17,
              19,
              21,
              23,
              25,
              27,
              29,
              31,
              33,
              35,
              37,
              39,
              41,
              43,
              45,
              47,
              49,
              51,
              53,
              55,
              57,
              59,
              61,
              63,
              65,
              67,
              69,
              71,
              73,
              75,
              77,
              79,
              81,
              83,
              85,
              87,
              89,
              91,
              93,
              95,
              97,
              99,
              101
            ]
          },
          "p5": 5,
          "p25": 25,
          "p50": 50,
          "p75": 75,
          "p95": 95,
          "topk": {
            "values": [
              "87",
              "71",
              "68",
              "51",
              "80",
              "70",
              "52",
              "84",
              "92",
              "69",
              "60",
              "97",
              "22",
              "59",
              "65",
              "98",
              "73",
              "44",
              "11",
              "42",
              "88",
              "82",
              "40",
              "43",
              "9",
              "15",
              "79",
              "48",
              "26",
              "85",
              "72",
              "95",
              "57",
              "81",
              "61",
              "19",
              "77",
              "30",
              "21",
              "3",
              "17",
              "37",
              "28",
              "5",
              "56",
              "91",
              "74",
              "54",
              "29",
              "4"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.03",
          "elapsed_milli": 31,
          "description": "This is a unique identifier for an order"
        },
        "customer_id": {
          "name": "customer_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 99,
          "positives_p": 1.0,
          "distinct": 62,
          "distinct_p": 0.6262626262626263,
          "min": 1,
          "max": 99,
          "sum": 4777.0,
          "avg": 48.25252525252525,
          "stddev": 27.781341350472964,
          "duplicates": 66,
          "duplicates_p": 0.6666666666666666,
          "non_duplicates": 33,
          "non_duplicates_p": 0.3333333333333333,
          "histogram": {
            "labels": [
              "1 _ 3",
              "3 _ 5",
              "5 _ 7",
              "7 _ 9",
              "9 _ 11",
              "11 _ 13",
              "13 _ 15",
              "15 _ 17",
              "17 _ 19",
              "19 _ 21",
              "21 _ 23",
              "23 _ 25",
              "25 _ 27",
              "27 _ 29",
              "29 _ 31",
              "31 _ 33",
              "33 _ 35",
              "35 _ 37",
              "37 _ 39",
              "39 _ 41",
              "41 _ 43",
              "43 _ 45",
              "45 _ 47",
              "47 _ 49",
              "49 _ 51",
              "51 _ 53",
              "53 _ 55",
              "55 _ 57",
              "57 _ 59",
              "59 _ 61",
              "61 _ 63",
              "63 _ 65",
              "65 _ 67",
              "67 _ 69",
              "69 _ 71",
              "71 _ 73",
              "73 _ 75",
              "75 _ 77",
              "77 _ 79",
              "79 _ 81",
              "81 _ 83",
              "83 _ 85",
              "85 _ 87",
              "87 _ 89",
              "89 _ 91",
              "91 _ 93",
              "93 _ 95",
              "95 _ 97",
              "97 _ 99",
              "99 _ 101"
            ],
            "counts": [
              3,
              3,
              1,
              3,
              1,
              2,
              1,
              1,
              1,
              2,
              4,
              0,
              4,
              3,
              2,
              2,
              2,
              3,
              1,
              2,
              3,
              0,
              2,
              2,
              2,
              4,
              7,
              0,
              2,
              1,
              0,
              4,
              3,
              1,
              4,
              3,
              0,
              1,
              0,
              3,
              0,
              2,
              3,
              1,
              3,
              2,
              3,
              0,
              0,
              2
            ],
            "bin_edges": [
              1,
              3,
              5,
              7,
              9,
              11,
              13,
              15,
              17,
              19,
              21,
              23,
              25,
              27,
              29,
              31,
              33,
              35,
              37,
              39,
              41,
              43,
              45,
              47,
              49,
              51,
              53,
              55,
              57,
              59,
              61,
              63,
              65,
              67,
              69,
              71,
              73,
              75,
              77,
              79,
              81,
              83,
              85,
              87,
              89,
              91,
              93,
              95,
              97,
              99,
              101
            ]
          },
          "p5": 3,
          "p25": 26,
          "p50": 50,
          "p75": 70,
          "p95": 93,
          "topk": {
            "values": [
              "54",
              "71",
              "22",
              "3",
              "51",
              "66",
              "84",
              "99",
              "42",
              "46",
              "70",
              "53",
              "69",
              "63",
              "25",
              "94",
              "47",
              "90",
              "35",
              "1",
              "64",
              "27",
              "79",
              "8",
              "26",
              "85",
              "57",
              "50",
              "30",
              "20",
              "33",
              "76",
              "18",
              "6",
              "68",
              "52",
              "80",
              "92",
              "59",
              "11",
              "88",
              "40",
              "9",
              "19",
              "21",
              "28",
              "91",
              "34",
              "86",
              "39"
            ],
            "counts": [
              5,
              3,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.03",
          "elapsed_milli": 30,
          "description": "Foreign key to the customers table"
        },
        "order_date": {
          "name": "order_date",
          "type": "datetime",
          "schema_type": "DATE",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "distinct": 69,
          "distinct_p": 0.696969696969697,
          "min": "2018-01-01",
          "max": "2018-04-09",
          "duplicates": 53,
          "duplicates_p": 0.5353535353535354,
          "non_duplicates": 46,
          "non_duplicates_p": 0.46464646464646464,
          "histogram": {
            "labels": [
              "2018-01-01 - 2018-02-01",
              "2018-02-01 - 2018-03-01",
              "2018-03-01 - 2018-04-01",
              "2018-04-01 - 2018-05-01"
            ],
            "counts": [
              29,
              27,
              35,
              8
            ],
            "bin_edges": [
              "2018-01-01",
              "2018-02-01",
              "2018-03-01",
              "2018-04-01",
              "2018-05-01"
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 5,
          "description": "Date (UTC) that the order was placed"
        },
        "status": {
          "name": "status",
          "type": "string",
          "schema_type": "TEXT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 99,
          "non_zero_length_p": 1.0,
          "distinct": 5,
          "distinct_p": 0.050505050505050504,
          "min": 6,
          "min_length": 6,
          "max": 14,
          "max_length": 14,
          "avg": 8.404040404040405,
          "avg_length": 8.404040404040405,
          "stddev": 1.3844559228926314,
          "stddev_length": 1.3844559228926314,
          "duplicates": 99,
          "duplicates_p": 1.0,
          "non_duplicates": 0,
          "non_duplicates_p": 0.0,
          "topk": {
            "values": [
              "completed",
              "placed",
              "shipped",
              "returned",
              "return_pending"
            ],
            "counts": [
              67,
              13,
              13,
              4,
              2
            ]
          },
          "histogram": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14"
            ],
            "counts": [
              13,
              13,
              4,
              67,
              0,
              0,
              0,
              0,
              2
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15
            ]
          },
          "histogram_length": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14"
            ],
            "counts": [
              13,
              13,
              4,
              67,
              0,
              0,
              0,
              0,
              2
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 9,
          "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"
        },
        "credit_card_amount": {
          "name": "credit_card_amount",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 50,
          "zeros_p": 0.5050505050505051,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 49,
          "positives_p": 0.494949494949495,
          "distinct": 25,
          "distinct_p": 0.25252525252525254,
          "min": 0,
          "max": 30,
          "sum": 871.0,
          "avg": 8.797979797979798,
          "stddev": 10.959088854927673,
          "duplicates": 91,
          "duplicates_p": 0.9191919191919192,
          "non_duplicates": 8,
          "non_duplicates_p": 0.08080808080808081,
          "histogram": {
            "labels": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30"
            ],
            "counts": [
              50,
              2,
              0,
              2,
              2,
              2,
              1,
              0,
              1,
              0,
              2,
              0,
              2,
              2,
              1,
              2,
              2,
              1,
              1,
              4,
              1,
              0,
              3,
              3,
              1,
              0,
              3,
              2,
              1,
              5,
              3
            ],
            "bin_edges": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31
            ]
          },
          "p5": 0,
          "p25": 0,
          "p50": 0,
          "p75": 19,
          "p95": 29,
          "topk": {
            "values": [
              "0",
              "29",
              "19",
              "23",
              "30",
              "22",
              "26",
              "10",
              "15",
              "3",
              "5",
              "4",
              "13",
              "16",
              "12",
              "1",
              "27",
              "8",
              "24",
              "20",
              "28",
              "6",
              "14",
              "17",
              "18"
            ],
            "counts": [
              50,
              5,
              4,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 11,
          "description": "Amount of the order (AUD) paid for by credit card"
        },
        "coupon_amount": {
          "name": "coupon_amount",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 86,
          "zeros_p": 0.8686868686868687,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 13,
          "positives_p": 0.13131313131313133,
          "distinct": 12,
          "distinct_p": 0.12121212121212122,
          "min": 0,
          "max": 26,
          "sum": 185.0,
          "avg": 1.8686868686868687,
          "stddev": 5.955012405351228,
          "duplicates": 89,
          "duplicates_p": 0.898989898989899,
          "non_duplicates": 10,
          "non_duplicates_p": 0.10101010101010101,
          "histogram": {
            "labels": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26"
            ],
            "counts": [
              86,
              1,
              3,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              1
            ],
            "bin_edges": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27
            ]
          },
          "p5": 0,
          "p25": 0,
          "p50": 0,
          "p75": 0,
          "p95": 22,
          "topk": {
            "values": [
              "0",
              "2",
              "17",
              "16",
              "7",
              "24",
              "25",
              "1",
              "18",
              "22",
              "23",
              "26"
            ],
            "counts": [
              86,
              3,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.02",
          "elapsed_milli": 18,
          "description": "Amount of the order (AUD) paid for by coupon"
        },
        "bank_transfer_amount": {
          "name": "bank_transfer_amount",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 67,
          "zeros_p": 0.6767676767676768,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 32,
          "positives_p": 0.32323232323232326,
          "distinct": 19,
          "distinct_p": 0.1919191919191919,
          "min": 0,
          "max": 26,
          "sum": 411.0,
          "avg": 4.151515151515151,
          "stddev": 7.420825132023676,
          "duplicates": 89,
          "duplicates_p": 0.898989898989899,
          "non_duplicates": 10,
          "non_duplicates_p": 0.10101010101010101,
          "histogram": {
            "labels": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26"
            ],
            "counts": [
              67,
              0,
              3,
              3,
              1,
              1,
              0,
              0,
              3,
              1,
              1,
              1,
              1,
              0,
              2,
              4,
              1,
              2,
              0,
              2,
              1,
              0,
              1,
              0,
              0,
              1,
              3
            ],
            "bin_edges": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27
            ]
          },
          "p5": 0,
          "p25": 0,
          "p50": 0,
          "p75": 5,
          "p95": 22,
          "topk": {
            "values": [
              "0",
              "15",
              "3",
              "8",
              "2",
              "26",
              "14",
              "19",
              "17",
              "20",
              "4",
              "11",
              "9",
              "5",
              "22",
              "10",
              "16",
              "12",
              "25"
            ],
            "counts": [
              67,
              4,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 8,
          "description": "Amount of the order (AUD) paid for by bank transfer"
        },
        "gift_card_amount": {
          "name": "gift_card_amount",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 87,
          "zeros_p": 0.8787878787878788,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 12,
          "positives_p": 0.12121212121212122,
          "distinct": 11,
          "distinct_p": 0.1111111111111111,
          "min": 0,
          "max": 30,
          "sum": 205.0,
          "avg": 2.0707070707070705,
          "stddev": 6.392362351566517,
          "duplicates": 91,
          "duplicates_p": 0.9191919191919192,
          "non_duplicates": 8,
          "non_duplicates_p": 0.08080808080808081,
          "histogram": {
            "labels": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30"
            ],
            "counts": [
              87,
              0,
              0,
              1,
              0,
              0,
              2,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              1,
              0,
              0,
              0,
              0,
              2,
              0,
              0,
              1,
              0,
              1,
              0,
              1
            ],
            "bin_edges": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31
            ]
          },
          "p5": 0,
          "p25": 0,
          "p50": 0,
          "p75": 0,
          "p95": 23,
          "topk": {
            "values": [
              "0",
              "6",
              "23",
              "3",
              "17",
              "11",
              "14",
              "18",
              "28",
              "26",
              "30"
            ],
            "counts": [
              87,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 10,
          "description": "Amount of the order (AUD) paid for by gift card"
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "schema_type": "BIGINT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 1,
          "zeros_p": 0.010101010101010102,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 98,
          "positives_p": 0.98989898989899,
          "distinct": 32,
          "distinct_p": 0.32323232323232326,
          "min": 0,
          "max": 58,
          "sum": 1672.0,
          "avg": 16.88888888888889,
          "stddev": 10.736062525374605,
          "duplicates": 91,
          "duplicates_p": 0.9191919191919192,
          "non_duplicates": 8,
          "non_duplicates_p": 0.08080808080808081,
          "histogram": {
            "labels": [
              "0 _ 2",
              "2 _ 4",
              "4 _ 6",
              "6 _ 8",
              "8 _ 10",
              "10 _ 12",
              "12 _ 14",
              "14 _ 16",
              "16 _ 18",
              "18 _ 20",
              "20 _ 22",
              "22 _ 24",
              "24 _ 26",
              "26 _ 28",
              "28 _ 30",
              "30 _ 32",
              "32 _ 34",
              "34 _ 36",
              "36 _ 38",
              "38 _ 40",
              "40 _ 42",
              "42 _ 44",
              "44 _ 46",
              "46 _ 48",
              "48 _ 50",
              "50 _ 52",
              "52 _ 54",
              "54 _ 56",
              "56 _ 58",
              "58 _ 60"
            ],
            "counts": [
              4,
              11,
              4,
              3,
              5,
              4,
              5,
              8,
              9,
              7,
              1,
              11,
              5,
              9,
              8,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1
            ],
            "bin_edges": [
              0,
              2,
              4,
              6,
              8,
              10,
              12,
              14,
              16,
              18,
              20,
              22,
              24,
              26,
              28,
              30,
              32,
              34,
              36,
              38,
              40,
              42,
              44,
              46,
              48,
              50,
              52,
              54,
              56,
              58,
              60
            ]
          },
          "p5": 2,
          "p25": 8,
          "p50": 17,
          "p75": 24,
          "p95": 30,
          "topk": {
            "values": [
              "26",
              "23",
              "3",
              "29",
              "17",
              "19",
              "15",
              "2",
              "22",
              "8",
              "14",
              "1",
              "12",
              "16",
              "24",
              "10",
              "30",
              "5",
              "4",
              "6",
              "13",
              "25",
              "27",
              "28",
              "11",
              "20",
              "56",
              "18",
              "58",
              "7",
              "9",
              "0"
            ],
            "counts": [
              7,
              7,
              6,
              6,
              6,
              6,
              5,
              5,
              4,
              4,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 10,
          "description": "Total amount (AUD) of the order"
        }
      },
      "profile_duration": "0.14",
      "elapsed_milli": 139,
      "description": "This table has basic information about orders, as well as some derived facts based on payments"
    },
    "stg_customers": {
      "name": "stg_customers",
      "row_count": 10,
      "samples": 10,
      "samples_p": 1,
      "col_count": 3,
      "columns": {
        "customer_id": {
          "name": "customer_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 10,
          "positives_p": 1.0,
          "distinct": 10,
          "distinct_p": 1.0,
          "min": 1,
          "max": 10,
          "sum": 55.0,
          "avg": 5.5,
          "stddev": 3.0276503540974917,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 10,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ],
            "bin_edges": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ]
          },
          "p5": 1,
          "p25": 3,
          "p50": 5,
          "p75": 8,
          "p95": 10,
          "topk": {
            "values": [
              "8",
              "10",
              "9",
              "7",
              "1",
              "5",
              "4",
              "2",
              "6",
              "3"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 14
        },
        "first_name": {
          "name": "first_name",
          "type": "string",
          "schema_type": "TEXT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 10,
          "non_zero_length_p": 1.0,
          "distinct": 10,
          "distinct_p": 1.0,
          "min": 5,
          "min_length": 5,
          "max": 9,
          "max_length": 9,
          "avg": 6.3,
          "avg_length": 6.3,
          "stddev": 1.5670212364724212,
          "stddev_length": 1.5670212364724212,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 10,
          "non_duplicates_p": 1.0,
          "topk": {
            "values": [
              "Shawn",
              "Michael",
              "Henry",
              "Jimmy",
              "Kathleen",
              "Jennifer",
              "Frank",
              "Katherine",
              "Sarah",
              "Martin"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "histogram": {
            "labels": [
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "counts": [
              5,
              1,
              1,
              2,
              1
            ],
            "bin_edges": [
              5,
              6,
              7,
              8,
              9,
              10
            ]
          },
          "histogram_length": {
            "labels": [
              "5",
              "6",
              "7",
              "8",
              "9"
            ],
            "counts": [
              5,
              1,
              1,
              2,
              1
            ],
            "bin_edges": [
              5,
              6,
              7,
              8,
              9,
              10
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 5
        },
        "last_name": {
          "name": "last_name",
          "type": "string",
          "schema_type": "TEXT",
          "total": 10,
          "samples": 10,
          "samples_p": 1,
          "non_nulls": 10,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 10,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 10,
          "non_zero_length_p": 1.0,
          "distinct": 6,
          "distinct_p": 0.6,
          "min": 2,
          "min_length": 2,
          "max": 2,
          "max_length": 2,
          "avg": 2.0,
          "avg_length": 2.0,
          "stddev": 0.0,
          "stddev_length": 0.0,
          "duplicates": 7,
          "duplicates_p": 0.7,
          "non_duplicates": 3,
          "non_duplicates_p": 0.3,
          "topk": {
            "values": [
              "R.",
              "M.",
              "P.",
              "F.",
              "W.",
              "C."
            ],
            "counts": [
              3,
              2,
              2,
              1,
              1,
              1
            ]
          },
          "histogram": {
            "labels": [
              "2"
            ],
            "counts": [
              10
            ],
            "bin_edges": [
              2,
              3
            ]
          },
          "histogram_length": {
            "labels": [
              "2"
            ],
            "counts": [
              10
            ],
            "bin_edges": [
              2,
              3
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 12
        }
      },
      "profile_duration": "0.04",
      "elapsed_milli": 40
    },
    "stg_payments": {
      "name": "stg_payments",
      "row_count": 113,
      "samples": 113,
      "samples_p": 1,
      "col_count": 4,
      "columns": {
        "payment_id": {
          "name": "payment_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 113,
          "samples": 113,
          "samples_p": 1,
          "non_nulls": 113,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 113,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 113,
          "positives_p": 1.0,
          "distinct": 113,
          "distinct_p": 1.0,
          "min": 1,
          "max": 113,
          "sum": 6441.0,
          "avg": 57.0,
          "stddev": 32.76430985081175,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 113,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "1 _ 4",
              "4 _ 7",
              "7 _ 10",
              "10 _ 13",
              "13 _ 16",
              "16 _ 19",
              "19 _ 22",
              "22 _ 25",
              "25 _ 28",
              "28 _ 31",
              "31 _ 34",
              "34 _ 37",
              "37 _ 40",
              "40 _ 43",
              "43 _ 46",
              "46 _ 49",
              "49 _ 52",
              "52 _ 55",
              "55 _ 58",
              "58 _ 61",
              "61 _ 64",
              "64 _ 67",
              "67 _ 70",
              "70 _ 73",
              "73 _ 76",
              "76 _ 79",
              "79 _ 82",
              "82 _ 85",
              "85 _ 88",
              "88 _ 91",
              "91 _ 94",
              "94 _ 97",
              "97 _ 100",
              "100 _ 103",
              "103 _ 106",
              "106 _ 109",
              "109 _ 112",
              "112 _ 115"
            ],
            "counts": [
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              3,
              2
            ],
            "bin_edges": [
              1,
              4,
              7,
              10,
              13,
              16,
              19,
              22,
              25,
              28,
              31,
              34,
              37,
              40,
              43,
              46,
              49,
              52,
              55,
              58,
              61,
              64,
              67,
              70,
              73,
              76,
              79,
              82,
              85,
              88,
              91,
              94,
              97,
              100,
              103,
              106,
              109,
              112,
              115
            ]
          },
          "p5": 6,
          "p25": 29,
          "p50": 57,
          "p75": 85,
          "p95": 108,
          "topk": {
            "values": [
              "25",
              "94",
              "30",
              "21",
              "49",
              "47",
              "3",
              "17",
              "37",
              "28",
              "20",
              "33",
              "1",
              "76",
              "106",
              "104",
              "5",
              "18",
              "64",
              "110",
              "55",
              "27",
              "23",
              "56",
              "91",
              "58",
              "8",
              "87",
              "74",
              "54",
              "29",
              "71",
              "68",
              "4",
              "34",
              "51",
              "96",
              "80",
              "70",
              "52",
              "83",
              "67",
              "63",
              "90",
              "10",
              "105",
              "35",
              "45",
              "107",
              "77"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 10
        },
        "order_id": {
          "name": "order_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 113,
          "samples": 113,
          "samples_p": 1,
          "non_nulls": 113,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 113,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 113,
          "positives_p": 1.0,
          "distinct": 99,
          "distinct_p": 0.8761061946902655,
          "min": 1,
          "max": 99,
          "sum": 5654.0,
          "avg": 50.0353982300885,
          "stddev": 28.54317819535489,
          "duplicates": 27,
          "duplicates_p": 0.23893805309734514,
          "non_duplicates": 86,
          "non_duplicates_p": 0.7610619469026548,
          "histogram": {
            "labels": [
              "1 _ 3",
              "3 _ 5",
              "5 _ 7",
              "7 _ 9",
              "9 _ 11",
              "11 _ 13",
              "13 _ 15",
              "15 _ 17",
              "17 _ 19",
              "19 _ 21",
              "21 _ 23",
              "23 _ 25",
              "25 _ 27",
              "27 _ 29",
              "29 _ 31",
              "31 _ 33",
              "33 _ 35",
              "35 _ 37",
              "37 _ 39",
              "39 _ 41",
              "41 _ 43",
              "43 _ 45",
              "45 _ 47",
              "47 _ 49",
              "49 _ 51",
              "51 _ 53",
              "53 _ 55",
              "55 _ 57",
              "57 _ 59",
              "59 _ 61",
              "61 _ 63",
              "63 _ 65",
              "65 _ 67",
              "67 _ 69",
              "69 _ 71",
              "71 _ 73",
              "73 _ 75",
              "75 _ 77",
              "77 _ 79",
              "79 _ 81",
              "81 _ 83",
              "83 _ 85",
              "85 _ 87",
              "87 _ 89",
              "89 _ 91",
              "91 _ 93",
              "93 _ 95",
              "95 _ 97",
              "97 _ 99",
              "99 _ 101"
            ],
            "counts": [
              2,
              2,
              2,
              2,
              3,
              2,
              3,
              2,
              3,
              2,
              2,
              2,
              4,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              2,
              3,
              2,
              2,
              2,
              2,
              3,
              2,
              2,
              2,
              2,
              3,
              3,
              2,
              2,
              2,
              3,
              2,
              3,
              2,
              2,
              2,
              1
            ],
            "bin_edges": [
              1,
              3,
              5,
              7,
              9,
              11,
              13,
              15,
              17,
              19,
              21,
              23,
              25,
              27,
              29,
              31,
              33,
              35,
              37,
              39,
              41,
              43,
              45,
              47,
              49,
              51,
              53,
              55,
              57,
              59,
              61,
              63,
              65,
              67,
              69,
              71,
              73,
              75,
              77,
              79,
              81,
              83,
              85,
              87,
              89,
              91,
              93,
              95,
              97,
              99,
              101
            ]
          },
          "p5": 6,
          "p25": 25,
          "p50": 51,
          "p75": 75,
          "p95": 94,
          "topk": {
            "values": [
              "25",
              "13",
              "67",
              "79",
              "87",
              "58",
              "51",
              "77",
              "54",
              "9",
              "18",
              "49",
              "92",
              "80",
              "70",
              "52",
              "83",
              "63",
              "90",
              "10",
              "35",
              "45",
              "6",
              "86",
              "84",
              "39",
              "93",
              "89",
              "69",
              "36",
              "31",
              "50",
              "60",
              "97",
              "14",
              "66",
              "22",
              "59",
              "65",
              "2",
              "16",
              "62",
              "75",
              "98",
              "73",
              "44",
              "11",
              "99",
              "42",
              "88"
            ],
            "counts": [
              3,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.06",
          "elapsed_milli": 58
        },
        "payment_method": {
          "name": "payment_method",
          "type": "string",
          "schema_type": "TEXT",
          "total": 113,
          "samples": 113,
          "samples_p": 1,
          "non_nulls": 113,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 113,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 113,
          "non_zero_length_p": 1.0,
          "distinct": 4,
          "distinct_p": 0.035398230088495575,
          "min": 6,
          "min_length": 6,
          "max": 13,
          "max_length": 13,
          "avg": 10.79646017699115,
          "avg_length": 10.79646017699115,
          "stddev": 2.113558661338224,
          "stddev_length": 2.113558661338224,
          "duplicates": 113,
          "duplicates_p": 1.0,
          "non_duplicates": 0,
          "non_duplicates_p": 0.0,
          "topk": {
            "values": [
              "credit_card",
              "bank_transfer",
              "coupon",
              "gift_card"
            ],
            "counts": [
              55,
              33,
              13,
              12
            ]
          },
          "histogram": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13"
            ],
            "counts": [
              13,
              0,
              0,
              12,
              0,
              55,
              0,
              33
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ]
          },
          "histogram_length": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13"
            ],
            "counts": [
              13,
              0,
              0,
              12,
              0,
              55,
              0,
              33
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ]
          },
          "profile_duration": "0.03",
          "elapsed_milli": 27
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 113,
          "samples": 113,
          "samples_p": 1,
          "non_nulls": 113,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 113,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 3,
          "zeros_p": 0.02654867256637168,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 110,
          "positives_p": 0.9734513274336283,
          "distinct": 30,
          "distinct_p": 0.26548672566371684,
          "min": 0,
          "max": 30,
          "sum": 1672.0,
          "avg": 14.79646017699115,
          "stddev": 9.198368733518732,
          "duplicates": 110,
          "duplicates_p": 0.9734513274336283,
          "non_duplicates": 3,
          "non_duplicates_p": 0.02654867256637168,
          "histogram": {
            "labels": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30"
            ],
            "counts": [
              3,
              4,
              6,
              6,
              3,
              4,
              4,
              1,
              5,
              3,
              3,
              2,
              3,
              1,
              4,
              5,
              4,
              5,
              4,
              6,
              2,
              0,
              5,
              6,
              2,
              2,
              8,
              1,
              2,
              6,
              3
            ],
            "bin_edges": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31
            ]
          },
          "p5": 1,
          "p25": 6,
          "p50": 15,
          "p75": 23,
          "p95": 29,
          "topk": {
            "values": [
              "26",
              "29",
              "2",
              "19",
              "3",
              "23",
              "17",
              "8",
              "15",
              "22",
              "14",
              "18",
              "16",
              "1",
              "5",
              "6",
              "30",
              "12",
              "10",
              "9",
              "0",
              "4",
              "20",
              "25",
              "11",
              "28",
              "24",
              "13",
              "7",
              "27"
            ],
            "counts": [
              8,
              6,
              6,
              6,
              6,
              6,
              5,
              5,
              5,
              5,
              4,
              4,
              4,
              4,
              4,
              4,
              3,
              3,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.02",
          "elapsed_milli": 15
        }
      },
      "profile_duration": "0.11",
      "elapsed_milli": 114
    },
    "stg_orders": {
      "name": "stg_orders",
      "row_count": 99,
      "samples": 99,
      "samples_p": 1,
      "col_count": 4,
      "columns": {
        "order_id": {
          "name": "order_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 99,
          "positives_p": 1.0,
          "distinct": 99,
          "distinct_p": 1.0,
          "min": 1,
          "max": 99,
          "sum": 4950.0,
          "avg": 50.0,
          "stddev": 28.722813232690143,
          "duplicates": 0,
          "duplicates_p": 0.0,
          "non_duplicates": 99,
          "non_duplicates_p": 1.0,
          "histogram": {
            "labels": [
              "1 _ 3",
              "3 _ 5",
              "5 _ 7",
              "7 _ 9",
              "9 _ 11",
              "11 _ 13",
              "13 _ 15",
              "15 _ 17",
              "17 _ 19",
              "19 _ 21",
              "21 _ 23",
              "23 _ 25",
              "25 _ 27",
              "27 _ 29",
              "29 _ 31",
              "31 _ 33",
              "33 _ 35",
              "35 _ 37",
              "37 _ 39",
              "39 _ 41",
              "41 _ 43",
              "43 _ 45",
              "45 _ 47",
              "47 _ 49",
              "49 _ 51",
              "51 _ 53",
              "53 _ 55",
              "55 _ 57",
              "57 _ 59",
              "59 _ 61",
              "61 _ 63",
              "63 _ 65",
              "65 _ 67",
              "67 _ 69",
              "69 _ 71",
              "71 _ 73",
              "73 _ 75",
              "75 _ 77",
              "77 _ 79",
              "79 _ 81",
              "81 _ 83",
              "83 _ 85",
              "85 _ 87",
              "87 _ 89",
              "89 _ 91",
              "91 _ 93",
              "93 _ 95",
              "95 _ 97",
              "97 _ 99",
              "99 _ 101"
            ],
            "counts": [
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1
            ],
            "bin_edges": [
              1,
              3,
              5,
              7,
              9,
              11,
              13,
              15,
              17,
              19,
              21,
              23,
              25,
              27,
              29,
              31,
              33,
              35,
              37,
              39,
              41,
              43,
              45,
              47,
              49,
              51,
              53,
              55,
              57,
              59,
              61,
              63,
              65,
              67,
              69,
              71,
              73,
              75,
              77,
              79,
              81,
              83,
              85,
              87,
              89,
              91,
              93,
              95,
              97,
              99,
              101
            ]
          },
          "p5": 5,
          "p25": 25,
          "p50": 50,
          "p75": 75,
          "p95": 95,
          "topk": {
            "values": [
              "55",
              "27",
              "23",
              "56",
              "91",
              "58",
              "8",
              "87",
              "74",
              "54",
              "29",
              "71",
              "68",
              "4",
              "34",
              "51",
              "96",
              "80",
              "70",
              "52",
              "83",
              "67",
              "63",
              "90",
              "10",
              "35",
              "45",
              "6",
              "86",
              "84",
              "39",
              "92",
              "93",
              "89",
              "69",
              "36",
              "31",
              "50",
              "60",
              "97",
              "14",
              "66",
              "22",
              "59",
              "13",
              "65",
              "2",
              "16",
              "62",
              "75"
            ],
            "counts": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 14
        },
        "customer_id": {
          "name": "customer_id",
          "type": "integer",
          "schema_type": "INTEGER",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zeros": 0,
          "zeros_p": 0.0,
          "negatives": 0,
          "negatives_p": 0.0,
          "positives": 99,
          "positives_p": 1.0,
          "distinct": 62,
          "distinct_p": 0.6262626262626263,
          "min": 1,
          "max": 99,
          "sum": 4777.0,
          "avg": 48.25252525252525,
          "stddev": 27.781341350472964,
          "duplicates": 66,
          "duplicates_p": 0.6666666666666666,
          "non_duplicates": 33,
          "non_duplicates_p": 0.3333333333333333,
          "histogram": {
            "labels": [
              "1 _ 3",
              "3 _ 5",
              "5 _ 7",
              "7 _ 9",
              "9 _ 11",
              "11 _ 13",
              "13 _ 15",
              "15 _ 17",
              "17 _ 19",
              "19 _ 21",
              "21 _ 23",
              "23 _ 25",
              "25 _ 27",
              "27 _ 29",
              "29 _ 31",
              "31 _ 33",
              "33 _ 35",
              "35 _ 37",
              "37 _ 39",
              "39 _ 41",
              "41 _ 43",
              "43 _ 45",
              "45 _ 47",
              "47 _ 49",
              "49 _ 51",
              "51 _ 53",
              "53 _ 55",
              "55 _ 57",
              "57 _ 59",
              "59 _ 61",
              "61 _ 63",
              "63 _ 65",
              "65 _ 67",
              "67 _ 69",
              "69 _ 71",
              "71 _ 73",
              "73 _ 75",
              "75 _ 77",
              "77 _ 79",
              "79 _ 81",
              "81 _ 83",
              "83 _ 85",
              "85 _ 87",
              "87 _ 89",
              "89 _ 91",
              "91 _ 93",
              "93 _ 95",
              "95 _ 97",
              "97 _ 99",
              "99 _ 101"
            ],
            "counts": [
              3,
              3,
              1,
              3,
              1,
              2,
              1,
              1,
              1,
              2,
              4,
              0,
              4,
              3,
              2,
              2,
              2,
              3,
              1,
              2,
              3,
              0,
              2,
              2,
              2,
              4,
              7,
              0,
              2,
              1,
              0,
              4,
              3,
              1,
              4,
              3,
              0,
              1,
              0,
              3,
              0,
              2,
              3,
              1,
              3,
              2,
              3,
              0,
              0,
              2
            ],
            "bin_edges": [
              1,
              3,
              5,
              7,
              9,
              11,
              13,
              15,
              17,
              19,
              21,
              23,
              25,
              27,
              29,
              31,
              33,
              35,
              37,
              39,
              41,
              43,
              45,
              47,
              49,
              51,
              53,
              55,
              57,
              59,
              61,
              63,
              65,
              67,
              69,
              71,
              73,
              75,
              77,
              79,
              81,
              83,
              85,
              87,
              89,
              91,
              93,
              95,
              97,
              99,
              101
            ]
          },
          "p5": 3,
          "p25": 26,
          "p50": 50,
          "p75": 70,
          "p95": 93,
          "topk": {
            "values": [
              "54",
              "3",
              "71",
              "66",
              "51",
              "22",
              "26",
              "85",
              "57",
              "25",
              "94",
              "30",
              "63",
              "47",
              "90",
              "35",
              "42",
              "1",
              "99",
              "64",
              "27",
              "69",
              "46",
              "8",
              "70",
              "50",
              "53",
              "79",
              "84",
              "33",
              "76",
              "18",
              "91",
              "7",
              "68",
              "34",
              "52",
              "80",
              "6",
              "86",
              "39",
              "92",
              "89",
              "93",
              "36",
              "31",
              "59",
              "13",
              "2",
              "16"
            ],
            "counts": [
              5,
              3,
              3,
              3,
              3,
              3,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              2,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "profile_duration": "0.02",
          "elapsed_milli": 22
        },
        "order_date": {
          "name": "order_date",
          "type": "datetime",
          "schema_type": "DATE",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "distinct": 69,
          "distinct_p": 0.696969696969697,
          "min": "2018-01-01",
          "max": "2018-04-09",
          "duplicates": 53,
          "duplicates_p": 0.5353535353535354,
          "non_duplicates": 46,
          "non_duplicates_p": 0.46464646464646464,
          "histogram": {
            "labels": [
              "2018-01-01 - 2018-02-01",
              "2018-02-01 - 2018-03-01",
              "2018-03-01 - 2018-04-01",
              "2018-04-01 - 2018-05-01"
            ],
            "counts": [
              29,
              27,
              35,
              8
            ],
            "bin_edges": [
              "2018-01-01",
              "2018-02-01",
              "2018-03-01",
              "2018-04-01",
              "2018-05-01"
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 7
        },
        "status": {
          "name": "status",
          "type": "string",
          "schema_type": "TEXT",
          "total": 99,
          "samples": 99,
          "samples_p": 1,
          "non_nulls": 99,
          "non_nulls_p": 1.0,
          "nulls": 0,
          "nulls_p": 0.0,
          "valids": 99,
          "valids_p": 1.0,
          "invalids": 0,
          "invalids_p": 0.0,
          "zero_length": 0,
          "zero_length_p": 0.0,
          "non_zero_length": 99,
          "non_zero_length_p": 1.0,
          "distinct": 5,
          "distinct_p": 0.050505050505050504,
          "min": 6,
          "min_length": 6,
          "max": 14,
          "max_length": 14,
          "avg": 8.404040404040405,
          "avg_length": 8.404040404040405,
          "stddev": 1.3844559228926314,
          "stddev_length": 1.3844559228926314,
          "duplicates": 99,
          "duplicates_p": 1.0,
          "non_duplicates": 0,
          "non_duplicates_p": 0.0,
          "topk": {
            "values": [
              "completed",
              "placed",
              "shipped",
              "returned",
              "return_pending"
            ],
            "counts": [
              67,
              13,
              13,
              4,
              2
            ]
          },
          "histogram": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14"
            ],
            "counts": [
              13,
              13,
              4,
              67,
              0,
              0,
              0,
              0,
              2
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15
            ]
          },
          "histogram_length": {
            "labels": [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14"
            ],
            "counts": [
              13,
              13,
              4,
              67,
              0,
              0,
              0,
              0,
              2
            ],
            "bin_edges": [
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15
            ]
          },
          "profile_duration": "0.01",
          "elapsed_milli": 8
        }
      },
      "profile_duration": "0.05",
      "elapsed_milli": 54
    },
    "raw_customers": {
      "name": "raw_customers",
      "col_count": 3,
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "schema_type": "INTEGER"
        },
        "first_name": {
          "name": "first_name",
          "type": "string",
          "schema_type": "TEXT"
        },
        "last_name": {
          "name": "last_name",
          "type": "string",
          "schema_type": "TEXT"
        }
      }
    },
    "raw_orders": {
      "name": "raw_orders",
      "col_count": 4,
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "schema_type": "INTEGER"
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "schema_type": "INTEGER"
        },
        "order_date": {
          "name": "order_date",
          "type": "datetime",
          "schema_type": "DATE"
        },
        "status": {
          "name": "status",
          "type": "string",
          "schema_type": "TEXT"
        }
      }
    },
    "raw_payments": {
      "name": "raw_payments",
      "col_count": 4,
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "schema_type": "INTEGER"
        },
        "order_id": {
          "name": "order_id",
          "type": "integer",
          "schema_type": "INTEGER"
        },
        "payment_method": {
          "name": "payment_method",
          "type": "string",
          "schema_type": "TEXT"
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "schema_type": "INTEGER"
        }
      }
    }
  },
  "tests": [],
  "dbt": {
    "manifest": {
      "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json",
        "dbt_version": "1.5.0",
        "generated_at": "2023-05-23T05:59:23.646868Z",
        "invocation_id": "64e97059-8922-4ad0-bf46-b959ced3f494",
        "env": {},
        "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b",
        "user_id": "f1f31c30-ed57-48b1-b16c-c2cd273e1e35",
        "send_anonymous_usage_stats": true,
        "adapter_type": "postgres"
      },
      "nodes": {
        "model.jaffle_shop.customers": {
          "database": "piperider",
          "schema": "public",
          "name": "customers",
          "resource_type": "model",
          "package_name": "jaffle_shop",
          "path": "customers.sql",
          "original_file_path": "models/customers.sql",
          "unique_id": "model.jaffle_shop.customers",
          "fqn": [
            "jaffle_shop",
            "customers"
          ],
          "alias": "customers",
          "checksum": {
            "name": "sha256",
            "checksum": "60bd72e33da43fff3a7e7609135c17cd4468bd22afec0735dd36018bfb5af30a"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [
              "piperider"
            ],
            "meta": {},
            "group": null,
            "materialized": "table",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [
            "piperider"
          ],
          "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
          "columns": {
            "customer_id": {
              "name": "customer_id",
              "description": "This is a unique identifier for a customer",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "first_name": {
              "name": "first_name",
              "description": "Customer's first name. PII.",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "last_name": {
              "name": "last_name",
              "description": "Customer's last name. PII.",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "first_order": {
              "name": "first_order",
              "description": "Date (UTC) of a customer's first order",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "most_recent_order": {
              "name": "most_recent_order",
              "description": "Date (UTC) of a customer's most recent order",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "number_of_orders": {
              "name": "number_of_orders",
              "description": "Count of the number of orders a customer has placed",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "total_order_amount": {
              "name": "total_order_amount",
              "description": "Total value (AUD) of a customer's orders",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            }
          },
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": "jaffle_shop://models/schema.yml",
          "build_path": "target/run/jaffle_shop/models/customers.sql",
          "deferred": false,
          "unrendered_config": {
            "materialized": "table",
            "tags": [
              "piperider"
            ]
          },
          "created_at": 1684821564.0299819,
          "relation_name": "\"piperider\".\"public\".\"customers\"",
          "raw_code": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final",
          "language": "sql",
          "refs": [
            {
              "name": "stg_customers",
              "package": null,
              "version": null
            },
            {
              "name": "stg_orders",
              "package": null,
              "version": null
            },
            {
              "name": "stg_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [],
            "nodes": [
              "model.jaffle_shop.stg_customers",
              "model.jaffle_shop.stg_orders",
              "model.jaffle_shop.stg_payments"
            ]
          },
          "compiled_path": "target/compiled/jaffle_shop/models/customers.sql",
          "compiled": true,
          "compiled_code": "with customers as (\n\n    select * from \"piperider\".\"public\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"piperider\".\"public\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"piperider\".\"public\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final",
          "extra_ctes_injected": true,
          "extra_ctes": [],
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "access": "protected",
          "constraints": [],
          "version": null,
          "latest_version": null
        },
        "model.jaffle_shop.orders": {
          "database": "piperider",
          "schema": "public",
          "name": "orders",
          "resource_type": "model",
          "package_name": "jaffle_shop",
          "path": "orders.sql",
          "original_file_path": "models/orders.sql",
          "unique_id": "model.jaffle_shop.orders",
          "fqn": [
            "jaffle_shop",
            "orders"
          ],
          "alias": "orders",
          "checksum": {
            "name": "sha256",
            "checksum": "27f8c79aad1cfd8411ab9c3d2ce8da1d787f7f05c58bbee1d247510dc426be0f"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [
              "piperider"
            ],
            "meta": {},
            "group": null,
            "materialized": "table",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [
            "piperider"
          ],
          "description": "This table has basic information about orders, as well as some derived facts based on payments",
          "columns": {
            "order_id": {
              "name": "order_id",
              "description": "This is a unique identifier for an order",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "customer_id": {
              "name": "customer_id",
              "description": "Foreign key to the customers table",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "order_date": {
              "name": "order_date",
              "description": "Date (UTC) that the order was placed",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "status": {
              "name": "status",
              "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "amount": {
              "name": "amount",
              "description": "Total amount (AUD) of the order",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "credit_card_amount": {
              "name": "credit_card_amount",
              "description": "Amount of the order (AUD) paid for by credit card",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "coupon_amount": {
              "name": "coupon_amount",
              "description": "Amount of the order (AUD) paid for by coupon",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "bank_transfer_amount": {
              "name": "bank_transfer_amount",
              "description": "Amount of the order (AUD) paid for by bank transfer",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "gift_card_amount": {
              "name": "gift_card_amount",
              "description": "Amount of the order (AUD) paid for by gift card",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            }
          },
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": "jaffle_shop://models/schema.yml",
          "build_path": "target/run/jaffle_shop/models/orders.sql",
          "deferred": false,
          "unrendered_config": {
            "materialized": "table",
            "tags": [
              "piperider"
            ]
          },
          "created_at": 1684821564.032266,
          "relation_name": "\"piperider\".\"public\".\"orders\"",
          "raw_code": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final",
          "language": "sql",
          "refs": [
            {
              "name": "stg_orders",
              "package": null,
              "version": null
            },
            {
              "name": "stg_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [],
            "nodes": [
              "model.jaffle_shop.stg_orders",
              "model.jaffle_shop.stg_payments"
            ]
          },
          "compiled_path": "target/compiled/jaffle_shop/models/orders.sql",
          "compiled": true,
          "compiled_code": "\n\nwith orders as (\n\n    select * from \"piperider\".\"public\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"piperider\".\"public\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final",
          "extra_ctes_injected": true,
          "extra_ctes": [],
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "access": "protected",
          "constraints": [],
          "version": null,
          "latest_version": null
        },
        "model.jaffle_shop.stg_customers": {
          "database": "piperider",
          "schema": "public",
          "name": "stg_customers",
          "resource_type": "model",
          "package_name": "jaffle_shop",
          "path": "staging/stg_customers.sql",
          "original_file_path": "models/staging/stg_customers.sql",
          "unique_id": "model.jaffle_shop.stg_customers",
          "fqn": [
            "jaffle_shop",
            "staging",
            "stg_customers"
          ],
          "alias": "stg_customers",
          "checksum": {
            "name": "sha256",
            "checksum": "256661737ebce63cef2563bfd0a758fe3dc45e4ce1e29b6e9111f55658be9622"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [
              "piperider"
            ],
            "meta": {},
            "group": null,
            "materialized": "view",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [
            "piperider"
          ],
          "description": "",
          "columns": {
            "customer_id": {
              "name": "customer_id",
              "description": "",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            }
          },
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": "jaffle_shop://models/staging/schema.yml",
          "build_path": "target/run/jaffle_shop/models/staging/stg_customers.sql",
          "deferred": false,
          "unrendered_config": {
            "materialized": "view",
            "tags": [
              "piperider"
            ]
          },
          "created_at": 1684821564.062128,
          "relation_name": "\"piperider\".\"public\".\"stg_customers\"",
          "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source limit 10\n\n)\n\nselect * from renamed",
          "language": "sql",
          "refs": [
            {
              "name": "raw_customers",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [],
            "nodes": [
              "seed.jaffle_shop.raw_customers"
            ]
          },
          "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_customers.sql",
          "compiled": true,
          "compiled_code": "with source as (\n    select * from \"piperider\".\"public\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source limit 10\n\n)\n\nselect * from renamed",
          "extra_ctes_injected": true,
          "extra_ctes": [],
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "access": "protected",
          "constraints": [],
          "version": null,
          "latest_version": null
        },
        "model.jaffle_shop.stg_payments": {
          "database": "piperider",
          "schema": "public",
          "name": "stg_payments",
          "resource_type": "model",
          "package_name": "jaffle_shop",
          "path": "staging/stg_payments.sql",
          "original_file_path": "models/staging/stg_payments.sql",
          "unique_id": "model.jaffle_shop.stg_payments",
          "fqn": [
            "jaffle_shop",
            "staging",
            "stg_payments"
          ],
          "alias": "stg_payments",
          "checksum": {
            "name": "sha256",
            "checksum": "9c1ee3bfb10e07c2dfc325d55925da0e521887136d9051768cb8acf09dc86bda"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [
              "piperider"
            ],
            "meta": {},
            "group": null,
            "materialized": "view",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [
            "piperider"
          ],
          "description": "",
          "columns": {
            "payment_id": {
              "name": "payment_id",
              "description": "",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "payment_method": {
              "name": "payment_method",
              "description": "",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            }
          },
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": "jaffle_shop://models/staging/schema.yml",
          "build_path": "target/run/jaffle_shop/models/staging/stg_payments.sql",
          "deferred": false,
          "unrendered_config": {
            "materialized": "view",
            "tags": [
              "piperider"
            ]
          },
          "created_at": 1684821564.0639591,
          "relation_name": "\"piperider\".\"public\".\"stg_payments\"",
          "raw_code": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
          "language": "sql",
          "refs": [
            {
              "name": "raw_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [],
            "nodes": [
              "seed.jaffle_shop.raw_payments"
            ]
          },
          "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_payments.sql",
          "compiled": true,
          "compiled_code": "with source as (\n    select * from \"piperider\".\"public\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
          "extra_ctes_injected": true,
          "extra_ctes": [],
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "access": "protected",
          "constraints": [],
          "version": null,
          "latest_version": null
        },
        "model.jaffle_shop.stg_orders": {
          "database": "piperider",
          "schema": "public",
          "name": "stg_orders",
          "resource_type": "model",
          "package_name": "jaffle_shop",
          "path": "staging/stg_orders.sql",
          "original_file_path": "models/staging/stg_orders.sql",
          "unique_id": "model.jaffle_shop.stg_orders",
          "fqn": [
            "jaffle_shop",
            "staging",
            "stg_orders"
          ],
          "alias": "stg_orders",
          "checksum": {
            "name": "sha256",
            "checksum": "f4f881cb09d2c4162200fc331d7401df6d1abd4fed492554a7db70dede347108"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [
              "piperider"
            ],
            "meta": {},
            "group": null,
            "materialized": "view",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [
            "piperider"
          ],
          "description": "",
          "columns": {
            "order_id": {
              "name": "order_id",
              "description": "",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            },
            "status": {
              "name": "status",
              "description": "",
              "meta": {},
              "data_type": null,
              "constraints": [],
              "quote": null,
              "tags": []
            }
          },
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": "jaffle_shop://models/staging/schema.yml",
          "build_path": "target/run/jaffle_shop/models/staging/stg_orders.sql",
          "deferred": false,
          "unrendered_config": {
            "materialized": "view",
            "tags": [
              "piperider"
            ]
          },
          "created_at": 1684821564.062937,
          "relation_name": "\"piperider\".\"public\".\"stg_orders\"",
          "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
          "language": "sql",
          "refs": [
            {
              "name": "raw_orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [],
            "nodes": [
              "seed.jaffle_shop.raw_orders"
            ]
          },
          "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_orders.sql",
          "compiled": true,
          "compiled_code": "with source as (\n    select * from \"piperider\".\"public\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
          "extra_ctes_injected": true,
          "extra_ctes": [],
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "access": "protected",
          "constraints": [],
          "version": null,
          "latest_version": null
        },
        "seed.jaffle_shop.raw_customers": {
          "database": "piperider",
          "schema": "public",
          "name": "raw_customers",
          "resource_type": "seed",
          "package_name": "jaffle_shop",
          "path": "raw_customers.csv",
          "original_file_path": "seeds/raw_customers.csv",
          "unique_id": "seed.jaffle_shop.raw_customers",
          "fqn": [
            "jaffle_shop",
            "raw_customers"
          ],
          "alias": "raw_customers",
          "checksum": {
            "name": "sha256",
            "checksum": "357d173dda65a741ad97d6683502286cc2655bb396ab5f4dfad12b8c39bd2a63"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "seed",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "quote_columns": null,
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.013243,
          "relation_name": "\"piperider\".\"public\".\"raw_customers\"",
          "raw_code": "",
          "root_path": "/Users/qrtt1/temp/dbt-labs/jaffle_shop",
          "depends_on": {
            "macros": []
          }
        },
        "seed.jaffle_shop.raw_orders": {
          "database": "piperider",
          "schema": "public",
          "name": "raw_orders",
          "resource_type": "seed",
          "package_name": "jaffle_shop",
          "path": "raw_orders.csv",
          "original_file_path": "seeds/raw_orders.csv",
          "unique_id": "seed.jaffle_shop.raw_orders",
          "fqn": [
            "jaffle_shop",
            "raw_orders"
          ],
          "alias": "raw_orders",
          "checksum": {
            "name": "sha256",
            "checksum": "ddecd7adf70a07a88b9c302aec2a03fce615b925c2c06f2d5ef99a5c97b41250"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "seed",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "quote_columns": null,
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.015006,
          "relation_name": "\"piperider\".\"public\".\"raw_orders\"",
          "raw_code": "",
          "root_path": "/Users/qrtt1/temp/dbt-labs/jaffle_shop",
          "depends_on": {
            "macros": []
          }
        },
        "seed.jaffle_shop.raw_payments": {
          "database": "piperider",
          "schema": "public",
          "name": "raw_payments",
          "resource_type": "seed",
          "package_name": "jaffle_shop",
          "path": "raw_payments.csv",
          "original_file_path": "seeds/raw_payments.csv",
          "unique_id": "seed.jaffle_shop.raw_payments",
          "fqn": [
            "jaffle_shop",
            "raw_payments"
          ],
          "alias": "raw_payments",
          "checksum": {
            "name": "sha256",
            "checksum": "6de0626a8db9c1750eefd1b2e17fac4c2a4b9f778eb50532d8b377b90de395e6"
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": null,
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "seed",
            "incremental_strategy": null,
            "persist_docs": {},
            "quoting": {},
            "column_types": {},
            "full_refresh": null,
            "unique_key": null,
            "on_schema_change": "ignore",
            "grants": {},
            "packages": [],
            "docs": {
              "show": true,
              "node_color": null
            },
            "contract": {
              "enforced": false
            },
            "quote_columns": null,
            "post-hook": [],
            "pre-hook": []
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.016372,
          "relation_name": "\"piperider\".\"public\".\"raw_payments\"",
          "raw_code": "",
          "root_path": "/Users/qrtt1/temp/dbt-labs/jaffle_shop",
          "depends_on": {
            "macros": []
          }
        },
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": {
          "test_metadata": {
            "name": "unique",
            "kwargs": {
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('customers')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "unique_customers_customer_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "unique_customers_customer_id.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1",
          "fqn": [
            "jaffle_shop",
            "unique_customers_customer_id"
          ],
          "alias": "unique_customers_customer_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0373619,
          "relation_name": null,
          "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "customers",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_unique"
            ],
            "nodes": [
              "model.jaffle_shop.customers"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.customers",
          "attached_node": "model.jaffle_shop.customers"
        },
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('customers')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_customers_customer_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_customers_customer_id.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
          "fqn": [
            "jaffle_shop",
            "not_null_customers_customer_id"
          ],
          "alias": "not_null_customers_customer_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0386639,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "customers",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.customers"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.customers",
          "attached_node": "model.jaffle_shop.customers"
        },
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": {
          "test_metadata": {
            "name": "unique",
            "kwargs": {
              "column_name": "order_id",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "unique_orders_order_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "unique_orders_order_id.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e",
          "fqn": [
            "jaffle_shop",
            "unique_orders_order_id"
          ],
          "alias": "unique_orders_order_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.03985,
          "relation_name": null,
          "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_unique"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "order_id",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "order_id",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_order_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_order_id.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_order_id"
          ],
          "alias": "not_null_orders_order_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.040962,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "order_id",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_customer_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_customer_id.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_customer_id"
          ],
          "alias": "not_null_orders_customer_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.042542,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": {
          "test_metadata": {
            "name": "relationships",
            "kwargs": {
              "to": "ref('customers')",
              "field": "customer_id",
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "relationships_orders_customer_id__customer_id__ref_customers_",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "relationships_orders_customer_id__customer_id__ref_customers_.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
          "fqn": [
            "jaffle_shop",
            "relationships_orders_customer_id__customer_id__ref_customers_"
          ],
          "alias": "relationships_orders_customer_id__customer_id__ref_customers_",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0439181,
          "relation_name": null,
          "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "customers",
              "package": null,
              "version": null
            },
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_relationships",
              "macro.dbt.get_where_subquery"
            ],
            "nodes": [
              "model.jaffle_shop.customers",
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": {
          "test_metadata": {
            "name": "accepted_values",
            "kwargs": {
              "values": [
                "placed",
                "shipped",
                "completed",
                "return_pending",
                "returned"
              ],
              "column_name": "status",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3",
          "fqn": [
            "jaffle_shop",
            "accepted_values_orders_status__placed__shipped__completed__return_pending__returned"
          ],
          "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758",
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {
            "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"
          },
          "created_at": 1684821564.050694,
          "relation_name": null,
          "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_accepted_values",
              "macro.dbt.get_where_subquery"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "status",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "amount",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_amount",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_amount.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_amount"
          ],
          "alias": "not_null_orders_amount",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.056389,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "amount",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "credit_card_amount",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_credit_card_amount",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_credit_card_amount.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_credit_card_amount"
          ],
          "alias": "not_null_orders_credit_card_amount",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.057481,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "credit_card_amount",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "coupon_amount",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_coupon_amount",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_coupon_amount.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_coupon_amount"
          ],
          "alias": "not_null_orders_coupon_amount",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.058689,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "coupon_amount",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "bank_transfer_amount",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_bank_transfer_amount",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_bank_transfer_amount.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_bank_transfer_amount"
          ],
          "alias": "not_null_orders_bank_transfer_amount",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0597708,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "bank_transfer_amount",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "gift_card_amount",
              "model": "{{ get_where_subquery(ref('orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_orders_gift_card_amount",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_orders_gift_card_amount.sql",
          "original_file_path": "models/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a",
          "fqn": [
            "jaffle_shop",
            "not_null_orders_gift_card_amount"
          ],
          "alias": "not_null_orders_gift_card_amount",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.060833,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "gift_card_amount",
          "file_key_name": "models.orders",
          "attached_node": "model.jaffle_shop.orders"
        },
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": {
          "test_metadata": {
            "name": "unique",
            "kwargs": {
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('stg_customers')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "unique_stg_customers_customer_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "unique_stg_customers_customer_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada",
          "fqn": [
            "jaffle_shop",
            "staging",
            "unique_stg_customers_customer_id"
          ],
          "alias": "unique_stg_customers_customer_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.064488,
          "relation_name": null,
          "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_customers",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_unique"
            ],
            "nodes": [
              "model.jaffle_shop.stg_customers"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.stg_customers",
          "attached_node": "model.jaffle_shop.stg_customers"
        },
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "customer_id",
              "model": "{{ get_where_subquery(ref('stg_customers')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_stg_customers_customer_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_stg_customers_customer_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
          "fqn": [
            "jaffle_shop",
            "staging",
            "not_null_stg_customers_customer_id"
          ],
          "alias": "not_null_stg_customers_customer_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.065803,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_customers",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.stg_customers"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "customer_id",
          "file_key_name": "models.stg_customers",
          "attached_node": "model.jaffle_shop.stg_customers"
        },
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": {
          "test_metadata": {
            "name": "unique",
            "kwargs": {
              "column_name": "order_id",
              "model": "{{ get_where_subquery(ref('stg_orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "unique_stg_orders_order_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "unique_stg_orders_order_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a",
          "fqn": [
            "jaffle_shop",
            "staging",
            "unique_stg_orders_order_id"
          ],
          "alias": "unique_stg_orders_order_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0674791,
          "relation_name": null,
          "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_unique"
            ],
            "nodes": [
              "model.jaffle_shop.stg_orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "order_id",
          "file_key_name": "models.stg_orders",
          "attached_node": "model.jaffle_shop.stg_orders"
        },
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "order_id",
              "model": "{{ get_where_subquery(ref('stg_orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_stg_orders_order_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_stg_orders_order_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
          "fqn": [
            "jaffle_shop",
            "staging",
            "not_null_stg_orders_order_id"
          ],
          "alias": "not_null_stg_orders_order_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0686212,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.stg_orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "order_id",
          "file_key_name": "models.stg_orders",
          "attached_node": "model.jaffle_shop.stg_orders"
        },
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {
          "test_metadata": {
            "name": "accepted_values",
            "kwargs": {
              "values": [
                "placed",
                "shipped",
                "completed",
                "return_pending",
                "returned"
              ],
              "column_name": "status",
              "model": "{{ get_where_subquery(ref('stg_orders')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
          "fqn": [
            "jaffle_shop",
            "staging",
            "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"
          ],
          "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {
            "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"
          },
          "created_at": 1684821564.069769,
          "relation_name": null,
          "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_orders",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_accepted_values",
              "macro.dbt.get_where_subquery"
            ],
            "nodes": [
              "model.jaffle_shop.stg_orders"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "status",
          "file_key_name": "models.stg_orders",
          "attached_node": "model.jaffle_shop.stg_orders"
        },
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": {
          "test_metadata": {
            "name": "unique",
            "kwargs": {
              "column_name": "payment_id",
              "model": "{{ get_where_subquery(ref('stg_payments')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "unique_stg_payments_payment_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "unique_stg_payments_payment_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712",
          "fqn": [
            "jaffle_shop",
            "staging",
            "unique_stg_payments_payment_id"
          ],
          "alias": "unique_stg_payments_payment_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.0736132,
          "relation_name": null,
          "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_unique"
            ],
            "nodes": [
              "model.jaffle_shop.stg_payments"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "payment_id",
          "file_key_name": "models.stg_payments",
          "attached_node": "model.jaffle_shop.stg_payments"
        },
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": {
          "test_metadata": {
            "name": "not_null",
            "kwargs": {
              "column_name": "payment_id",
              "model": "{{ get_where_subquery(ref('stg_payments')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "not_null_stg_payments_payment_id",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "not_null_stg_payments_payment_id.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
          "fqn": [
            "jaffle_shop",
            "staging",
            "not_null_stg_payments_payment_id"
          ],
          "alias": "not_null_stg_payments_payment_id",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": null,
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {},
          "created_at": 1684821564.074788,
          "relation_name": null,
          "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_not_null"
            ],
            "nodes": [
              "model.jaffle_shop.stg_payments"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "payment_id",
          "file_key_name": "models.stg_payments",
          "attached_node": "model.jaffle_shop.stg_payments"
        },
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {
          "test_metadata": {
            "name": "accepted_values",
            "kwargs": {
              "values": [
                "credit_card",
                "coupon",
                "bank_transfer",
                "gift_card"
              ],
              "column_name": "payment_method",
              "model": "{{ get_where_subquery(ref('stg_payments')) }}"
            },
            "namespace": null
          },
          "database": "piperider",
          "schema": "public_dbt_test__audit",
          "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card",
          "resource_type": "test",
          "package_name": "jaffle_shop",
          "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql",
          "original_file_path": "models/staging/schema.yml",
          "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
          "fqn": [
            "jaffle_shop",
            "staging",
            "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"
          ],
          "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
          "checksum": {
            "name": "none",
            "checksum": ""
          },
          "config": {
            "enabled": true,
            "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
            "schema": "dbt_test__audit",
            "database": null,
            "tags": [],
            "meta": {},
            "group": null,
            "materialized": "test",
            "severity": "ERROR",
            "store_failures": null,
            "where": null,
            "limit": null,
            "fail_calc": "count(*)",
            "warn_if": "!= 0",
            "error_if": "!= 0"
          },
          "tags": [],
          "description": "",
          "columns": {},
          "meta": {},
          "group": null,
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "build_path": null,
          "deferred": false,
          "unrendered_config": {
            "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"
          },
          "created_at": 1684821564.076097,
          "relation_name": null,
          "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}",
          "language": "sql",
          "refs": [
            {
              "name": "stg_payments",
              "package": null,
              "version": null
            }
          ],
          "sources": [],
          "metrics": [],
          "depends_on": {
            "macros": [
              "macro.dbt.test_accepted_values",
              "macro.dbt.get_where_subquery"
            ],
            "nodes": [
              "model.jaffle_shop.stg_payments"
            ]
          },
          "compiled_path": null,
          "contract": {
            "enforced": false,
            "checksum": null
          },
          "column_name": "payment_method",
          "file_key_name": "models.stg_payments",
          "attached_node": "model.jaffle_shop.stg_payments"
        }
      },
      "sources": {},
      "macros": {
        "macro.dbt_postgres.postgres__current_timestamp": {
          "name": "postgres__current_timestamp",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/timestamps.sql",
          "original_file_path": "macros/timestamps.sql",
          "unique_id": "macro.dbt_postgres.postgres__current_timestamp",
          "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.673074,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_string_as_time": {
          "name": "postgres__snapshot_string_as_time",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/timestamps.sql",
          "original_file_path": "macros/timestamps.sql",
          "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time",
          "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.673846,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_get_time": {
          "name": "postgres__snapshot_get_time",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/timestamps.sql",
          "original_file_path": "macros/timestamps.sql",
          "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time",
          "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.current_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.673986,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_backcompat": {
          "name": "postgres__current_timestamp_backcompat",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/timestamps.sql",
          "original_file_path": "macros/timestamps.sql",
          "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat",
          "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.type_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.674103,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {
          "name": "postgres__current_timestamp_in_utc_backcompat",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/timestamps.sql",
          "original_file_path": "macros/timestamps.sql",
          "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat",
          "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.type_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.674284,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_catalog": {
          "name": "postgres__get_catalog",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/catalog.sql",
          "original_file_path": "macros/catalog.sql",
          "unique_id": "macro.dbt_postgres.postgres__get_catalog",
          "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6754718,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres_get_relations": {
          "name": "postgres_get_relations",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/relations.sql",
          "original_file_path": "macros/relations.sql",
          "unique_id": "macro.dbt_postgres.postgres_get_relations",
          "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.676162,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_table_as": {
          "name": "postgres__create_table_as",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__create_table_as",
          "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_assert_columns_equivalent",
              "macro.dbt.get_table_columns_and_constraints",
              "macro.dbt_postgres.get_column_names",
              "macro.dbt.get_select_subquery"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.683726,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_create_index_sql": {
          "name": "postgres__get_create_index_sql",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql",
          "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.684267,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_schema": {
          "name": "postgres__create_schema",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__create_schema",
          "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.684604,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_schema": {
          "name": "postgres__drop_schema",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__drop_schema",
          "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6849349,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_columns_in_relation": {
          "name": "postgres__get_columns_in_relation",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation",
          "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement",
              "macro.dbt.sql_convert_columns_in_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.685431,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_relations_without_caching": {
          "name": "postgres__list_relations_without_caching",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching",
          "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6858299,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__information_schema_name": {
          "name": "postgres__information_schema_name",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__information_schema_name",
          "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6860218,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_schemas": {
          "name": "postgres__list_schemas",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__list_schemas",
          "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.686387,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__check_schema_exists": {
          "name": "postgres__check_schema_exists",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__check_schema_exists",
          "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6869671,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_relation_with_suffix": {
          "name": "postgres__make_relation_with_suffix",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix",
          "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.687882,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_intermediate_relation": {
          "name": "postgres__make_intermediate_relation",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation",
          "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_relation_with_suffix"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.688079,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_temp_relation": {
          "name": "postgres__make_temp_relation",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__make_temp_relation",
          "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_relation_with_suffix"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.688391,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_backup_relation": {
          "name": "postgres__make_backup_relation",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__make_backup_relation",
          "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_relation_with_suffix"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6886568,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres_escape_comment": {
          "name": "postgres_escape_comment",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres_escape_comment",
          "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.689076,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_relation_comment": {
          "name": "postgres__alter_relation_comment",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment",
          "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres_escape_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.689292,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_column_comment": {
          "name": "postgres__alter_column_comment",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__alter_column_comment",
          "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres_escape_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6898859,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_show_grant_sql": {
          "name": "postgres__get_show_grant_sql",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql",
          "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.690082,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__copy_grants": {
          "name": "postgres__copy_grants",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/adapters.sql",
          "original_file_path": "macros/adapters.sql",
          "unique_id": "macro.dbt_postgres.postgres__copy_grants",
          "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.690197,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_incremental_default_sql": {
          "name": "postgres__get_incremental_default_sql",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/materializations/incremental_strategies.sql",
          "original_file_path": "macros/materializations/incremental_strategies.sql",
          "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql",
          "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_incremental_delete_insert_sql",
              "macro.dbt.get_incremental_append_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.690641,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_merge_sql": {
          "name": "postgres__snapshot_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/materializations/snapshot_merge.sql",
          "original_file_path": "macros/materializations/snapshot_merge.sql",
          "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql",
          "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6913621,
          "supported_languages": null
        },
        "macro.dbt_postgres.get_column_names": {
          "name": "get_column_names",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/columns_spec_ddl.sql",
          "original_file_path": "macros/utils/columns_spec_ddl.sql",
          "unique_id": "macro.dbt_postgres.get_column_names",
          "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6918132,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__dateadd": {
          "name": "postgres__dateadd",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/dateadd.sql",
          "original_file_path": "macros/utils/dateadd.sql",
          "unique_id": "macro.dbt_postgres.postgres__dateadd",
          "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.692018,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__listagg": {
          "name": "postgres__listagg",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/listagg.sql",
          "original_file_path": "macros/utils/listagg.sql",
          "unique_id": "macro.dbt_postgres.postgres__listagg",
          "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.692731,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__datediff": {
          "name": "postgres__datediff",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/datediff.sql",
          "original_file_path": "macros/utils/datediff.sql",
          "unique_id": "macro.dbt_postgres.postgres__datediff",
          "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.datediff"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.695919,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__any_value": {
          "name": "postgres__any_value",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/any_value.sql",
          "original_file_path": "macros/utils/any_value.sql",
          "unique_id": "macro.dbt_postgres.postgres__any_value",
          "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6960661,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__last_day": {
          "name": "postgres__last_day",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/last_day.sql",
          "original_file_path": "macros/utils/last_day.sql",
          "unique_id": "macro.dbt_postgres.postgres__last_day",
          "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.dateadd",
              "macro.dbt.date_trunc",
              "macro.dbt.default_last_day"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.696547,
          "supported_languages": null
        },
        "macro.dbt_postgres.postgres__split_part": {
          "name": "postgres__split_part",
          "resource_type": "macro",
          "package_name": "dbt_postgres",
          "path": "macros/utils/split_part.sql",
          "original_file_path": "macros/utils/split_part.sql",
          "unique_id": "macro.dbt_postgres.postgres__split_part",
          "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__split_part",
              "macro.dbt._split_part_negative"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.697186,
          "supported_languages": null
        },
        "macro.dbt.run_hooks": {
          "name": "run_hooks",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/hooks.sql",
          "original_file_path": "macros/materializations/hooks.sql",
          "unique_id": "macro.dbt.run_hooks",
          "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.69843,
          "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
          "name": "make_hook_config",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/hooks.sql",
          "original_file_path": "macros/materializations/hooks.sql",
          "unique_id": "macro.dbt.make_hook_config",
          "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.698655,
          "supported_languages": null
        },
        "macro.dbt.before_begin": {
          "name": "before_begin",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/hooks.sql",
          "original_file_path": "macros/materializations/hooks.sql",
          "unique_id": "macro.dbt.before_begin",
          "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.make_hook_config"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6988192,
          "supported_languages": null
        },
        "macro.dbt.in_transaction": {
          "name": "in_transaction",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/hooks.sql",
          "original_file_path": "macros/materializations/hooks.sql",
          "unique_id": "macro.dbt.in_transaction",
          "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.make_hook_config"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.698963,
          "supported_languages": null
        },
        "macro.dbt.after_commit": {
          "name": "after_commit",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/hooks.sql",
          "original_file_path": "macros/materializations/hooks.sql",
          "unique_id": "macro.dbt.after_commit",
          "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.make_hook_config"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.699122,
          "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
          "name": "set_sql_header",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/configs.sql",
          "original_file_path": "macros/materializations/configs.sql",
          "unique_id": "macro.dbt.set_sql_header",
          "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.699523,
          "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
          "name": "should_full_refresh",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/configs.sql",
          "original_file_path": "macros/materializations/configs.sql",
          "unique_id": "macro.dbt.should_full_refresh",
          "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.6998348,
          "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
          "name": "should_store_failures",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/configs.sql",
          "original_file_path": "macros/materializations/configs.sql",
          "unique_id": "macro.dbt.should_store_failures",
          "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.700151,
          "supported_languages": null
        },
        "macro.dbt.snapshot_merge_sql": {
          "name": "snapshot_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/snapshot_merge.sql",
          "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
          "unique_id": "macro.dbt.snapshot_merge_sql",
          "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__snapshot_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.700602,
          "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
          "name": "default__snapshot_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/snapshot_merge.sql",
          "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
          "unique_id": "macro.dbt.default__snapshot_merge_sql",
          "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.700941,
          "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
          "name": "strategy_dispatch",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.strategy_dispatch",
          "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7049742,
          "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
          "name": "snapshot_hash_arguments",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.snapshot_hash_arguments",
          "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__snapshot_hash_arguments"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.705176,
          "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
          "name": "default__snapshot_hash_arguments",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.default__snapshot_hash_arguments",
          "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.705408,
          "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
          "name": "snapshot_timestamp_strategy",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.snapshot_timestamp_strategy",
          "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.snapshot_hash_arguments"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.706174,
          "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
          "name": "snapshot_string_as_time",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.snapshot_string_as_time",
          "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__snapshot_string_as_time"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.706362,
          "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
          "name": "default__snapshot_string_as_time",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.default__snapshot_string_as_time",
          "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.706609,
          "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
          "name": "snapshot_check_all_get_existing_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_columns_in_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.70801,
          "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
          "name": "snapshot_check_strategy",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/strategies.sql",
          "original_file_path": "macros/materializations/snapshots/strategies.sql",
          "unique_id": "macro.dbt.snapshot_check_strategy",
          "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.snapshot_get_time",
              "macro.dbt.snapshot_check_all_get_existing_columns",
              "macro.dbt.get_true_sql",
              "macro.dbt.snapshot_hash_arguments"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.709346,
          "supported_languages": null
        },
        "macro.dbt.create_columns": {
          "name": "create_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.create_columns",
          "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__create_columns"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.713554,
          "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
          "name": "default__create_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.default__create_columns",
          "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.713826,
          "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
          "name": "post_snapshot",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.post_snapshot",
          "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__post_snapshot"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.713989,
          "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
          "name": "default__post_snapshot",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.default__post_snapshot",
          "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.714071,
          "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
          "name": "get_true_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.get_true_sql",
          "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_true_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.71421,
          "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
          "name": "default__get_true_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.default__get_true_sql",
          "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.714319,
          "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
          "name": "snapshot_staging_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.snapshot_staging_table",
          "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__snapshot_staging_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.714514,
          "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
          "name": "default__snapshot_staging_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.default__snapshot_staging_table",
          "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.snapshot_get_time"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.71538,
          "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
          "name": "build_snapshot_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.build_snapshot_table",
          "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__build_snapshot_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7155619,
          "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
          "name": "default__build_snapshot_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.default__build_snapshot_table",
          "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7158039,
          "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
          "name": "build_snapshot_staging_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/helpers.sql",
          "original_file_path": "macros/materializations/snapshots/helpers.sql",
          "unique_id": "macro.dbt.build_snapshot_staging_table",
          "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.make_temp_relation",
              "macro.dbt.snapshot_staging_table",
              "macro.dbt.statement",
              "macro.dbt.create_table_as"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.716214,
          "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
          "name": "materialization_snapshot_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/snapshots/snapshot.sql",
          "original_file_path": "macros/materializations/snapshots/snapshot.sql",
          "unique_id": "macro.dbt.materialization_snapshot_default",
          "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_or_create_relation",
              "macro.dbt.run_hooks",
              "macro.dbt.strategy_dispatch",
              "macro.dbt.build_snapshot_table",
              "macro.dbt.create_table_as",
              "macro.dbt.build_snapshot_staging_table",
              "macro.dbt.create_columns",
              "macro.dbt.snapshot_merge_sql",
              "macro.dbt.statement",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants",
              "macro.dbt.persist_docs",
              "macro.dbt.create_indexes",
              "macro.dbt.post_snapshot"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.722837,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.materialization_test_default": {
          "name": "materialization_test_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/tests/test.sql",
          "original_file_path": "macros/materializations/tests/test.sql",
          "unique_id": "macro.dbt.materialization_test_default",
          "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
          "depends_on": {
            "macros": [
              "macro.dbt.should_store_failures",
              "macro.dbt.statement",
              "macro.dbt.create_table_as",
              "macro.dbt.get_test_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7248452,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.get_test_sql": {
          "name": "get_test_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/tests/helpers.sql",
          "original_file_path": "macros/materializations/tests/helpers.sql",
          "unique_id": "macro.dbt.get_test_sql",
          "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_test_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.725287,
          "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
          "name": "default__get_test_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/tests/helpers.sql",
          "original_file_path": "macros/materializations/tests/helpers.sql",
          "unique_id": "macro.dbt.default__get_test_sql",
          "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.725579,
          "supported_languages": null
        },
        "macro.dbt.get_where_subquery": {
          "name": "get_where_subquery",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/tests/where_subquery.sql",
          "original_file_path": "macros/materializations/tests/where_subquery.sql",
          "unique_id": "macro.dbt.get_where_subquery",
          "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_where_subquery"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7259378,
          "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
          "name": "default__get_where_subquery",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/tests/where_subquery.sql",
          "original_file_path": "macros/materializations/tests/where_subquery.sql",
          "unique_id": "macro.dbt.default__get_where_subquery",
          "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.726295,
          "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
          "name": "get_quoted_csv",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/column_helpers.sql",
          "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
          "unique_id": "macro.dbt.get_quoted_csv",
          "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.728173,
          "supported_languages": null
        },
        "macro.dbt.diff_columns": {
          "name": "diff_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/column_helpers.sql",
          "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
          "unique_id": "macro.dbt.diff_columns",
          "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.728776,
          "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
          "name": "diff_column_data_types",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/column_helpers.sql",
          "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
          "unique_id": "macro.dbt.diff_column_data_types",
          "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7294872,
          "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
          "name": "get_merge_update_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/column_helpers.sql",
          "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
          "unique_id": "macro.dbt.get_merge_update_columns",
          "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_merge_update_columns"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.729732,
          "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
          "name": "default__get_merge_update_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/column_helpers.sql",
          "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
          "unique_id": "macro.dbt.default__get_merge_update_columns",
          "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.730474,
          "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
          "name": "get_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.get_merge_sql",
          "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.737323,
          "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
          "name": "default__get_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.default__get_merge_sql",
          "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_quoted_csv",
              "macro.dbt.get_merge_update_columns"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7390661,
          "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
          "name": "get_delete_insert_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.get_delete_insert_merge_sql",
          "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_delete_insert_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.739323,
          "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
          "name": "default__get_delete_insert_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
          "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_quoted_csv"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.740289,
          "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
          "name": "get_insert_overwrite_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
          "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_insert_overwrite_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.740549,
          "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
          "name": "default__get_insert_overwrite_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/merge.sql",
          "original_file_path": "macros/materializations/models/incremental/merge.sql",
          "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
          "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_quoted_csv"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.741169,
          "supported_languages": null
        },
        "macro.dbt.is_incremental": {
          "name": "is_incremental",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/is_incremental.sql",
          "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
          "unique_id": "macro.dbt.is_incremental",
          "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.should_full_refresh"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.741787,
          "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
          "name": "get_incremental_append_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_incremental_append_sql",
          "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_incremental_append_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.742656,
          "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
          "name": "default__get_incremental_append_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.default__get_incremental_append_sql",
          "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_insert_into_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7428842,
          "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
          "name": "get_incremental_delete_insert_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
          "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_incremental_delete_insert_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.743062,
          "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
          "name": "default__get_incremental_delete_insert_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
          "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_delete_insert_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.743344,
          "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
          "name": "get_incremental_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_incremental_merge_sql",
          "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_incremental_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7435222,
          "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
          "name": "default__get_incremental_merge_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.default__get_incremental_merge_sql",
          "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.743805,
          "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
          "name": "get_incremental_insert_overwrite_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
          "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_incremental_insert_overwrite_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.743986,
          "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
          "name": "default__get_incremental_insert_overwrite_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
          "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_insert_overwrite_merge_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.744236,
          "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
          "name": "get_incremental_default_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_incremental_default_sql",
          "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__get_incremental_default_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.744415,
          "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
          "name": "default__get_incremental_default_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.default__get_incremental_default_sql",
          "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_incremental_append_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.744555,
          "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
          "name": "get_insert_into_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/strategies.sql",
          "original_file_path": "macros/materializations/models/incremental/strategies.sql",
          "unique_id": "macro.dbt.get_insert_into_sql",
          "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_quoted_csv"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.744826,
          "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
          "name": "materialization_incremental_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/incremental.sql",
          "original_file_path": "macros/materializations/models/incremental/incremental.sql",
          "unique_id": "macro.dbt.materialization_incremental_default",
          "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
          "depends_on": {
            "macros": [
              "macro.dbt.load_cached_relation",
              "macro.dbt.make_temp_relation",
              "macro.dbt.make_intermediate_relation",
              "macro.dbt.make_backup_relation",
              "macro.dbt.should_full_refresh",
              "macro.dbt.incremental_validate_on_schema_change",
              "macro.dbt.drop_relation_if_exists",
              "macro.dbt.run_hooks",
              "macro.dbt.get_create_table_as_sql",
              "macro.dbt.run_query",
              "macro.dbt.process_schema_changes",
              "macro.dbt.statement",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants",
              "macro.dbt.persist_docs",
              "macro.dbt.create_indexes"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.750035,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.incremental_validate_on_schema_change": {
          "name": "incremental_validate_on_schema_change",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/on_schema_change.sql",
          "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
          "unique_id": "macro.dbt.incremental_validate_on_schema_change",
          "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.756016,
          "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
          "name": "check_for_schema_changes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/on_schema_change.sql",
          "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
          "unique_id": "macro.dbt.check_for_schema_changes",
          "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.diff_columns",
              "macro.dbt.diff_column_data_types"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7572758,
          "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
          "name": "sync_column_schemas",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/on_schema_change.sql",
          "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
          "unique_id": "macro.dbt.sync_column_schemas",
          "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.alter_relation_add_remove_columns",
              "macro.dbt.alter_column_type"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.758515,
          "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
          "name": "process_schema_changes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/incremental/on_schema_change.sql",
          "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
          "unique_id": "macro.dbt.process_schema_changes",
          "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.check_for_schema_changes",
              "macro.dbt.sync_column_schemas"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.759361,
          "supported_languages": null
        },
        "macro.dbt.get_table_columns_and_constraints": {
          "name": "get_table_columns_and_constraints",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.get_table_columns_and_constraints",
          "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_table_columns_and_constraints"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.760397,
          "supported_languages": null
        },
        "macro.dbt.default__get_table_columns_and_constraints": {
          "name": "default__get_table_columns_and_constraints",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
          "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.table_columns_and_constraints"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7605171,
          "supported_languages": null
        },
        "macro.dbt.table_columns_and_constraints": {
          "name": "table_columns_and_constraints",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.table_columns_and_constraints",
          "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7610419,
          "supported_languages": null
        },
        "macro.dbt.get_assert_columns_equivalent": {
          "name": "get_assert_columns_equivalent",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.get_assert_columns_equivalent",
          "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_assert_columns_equivalent"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.761214,
          "supported_languages": null
        },
        "macro.dbt.default__get_assert_columns_equivalent": {
          "name": "default__get_assert_columns_equivalent",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
          "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.assert_columns_equivalent"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.761345,
          "supported_languages": null
        },
        "macro.dbt.assert_columns_equivalent": {
          "name": "assert_columns_equivalent",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.assert_columns_equivalent",
          "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_column_schema_from_query",
              "macro.dbt.get_empty_schema_sql",
              "macro.dbt.format_columns"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7624042,
          "supported_languages": null
        },
        "macro.dbt.format_columns": {
          "name": "format_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.format_columns",
          "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__format_column"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.762777,
          "supported_languages": null
        },
        "macro.dbt.default__format_column": {
          "name": "default__format_column",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql",
          "unique_id": "macro.dbt.default__format_column",
          "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.763125,
          "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
          "name": "materialization_table_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/table.sql",
          "original_file_path": "macros/materializations/models/table/table.sql",
          "unique_id": "macro.dbt.materialization_table_default",
          "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
          "depends_on": {
            "macros": [
              "macro.dbt.load_cached_relation",
              "macro.dbt.make_intermediate_relation",
              "macro.dbt.make_backup_relation",
              "macro.dbt.drop_relation_if_exists",
              "macro.dbt.run_hooks",
              "macro.dbt.statement",
              "macro.dbt.get_create_table_as_sql",
              "macro.dbt.create_indexes",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants",
              "macro.dbt.persist_docs"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.765769,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.get_create_table_as_sql": {
          "name": "get_create_table_as_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.get_create_table_as_sql",
          "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_create_table_as_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.766675,
          "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
          "name": "default__get_create_table_as_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.default__get_create_table_as_sql",
          "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.create_table_as"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.766856,
          "supported_languages": null
        },
        "macro.dbt.create_table_as": {
          "name": "create_table_as",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.create_table_as",
          "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__create_table_as"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7672892,
          "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
          "name": "default__create_table_as",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.default__create_table_as",
          "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_assert_columns_equivalent",
              "macro.dbt.get_table_columns_and_constraints",
              "macro.dbt.get_select_subquery"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7681012,
          "supported_languages": null
        },
        "macro.dbt.get_select_subquery": {
          "name": "get_select_subquery",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.get_select_subquery",
          "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_select_subquery"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7683132,
          "supported_languages": null
        },
        "macro.dbt.default__get_select_subquery": {
          "name": "default__get_select_subquery",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/table/create_table_as.sql",
          "original_file_path": "macros/materializations/models/table/create_table_as.sql",
          "unique_id": "macro.dbt.default__get_select_subquery",
          "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.768578,
          "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
          "name": "materialization_view_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/view.sql",
          "original_file_path": "macros/materializations/models/view/view.sql",
          "unique_id": "macro.dbt.materialization_view_default",
          "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
          "depends_on": {
            "macros": [
              "macro.dbt.load_cached_relation",
              "macro.dbt.make_intermediate_relation",
              "macro.dbt.make_backup_relation",
              "macro.dbt.run_hooks",
              "macro.dbt.drop_relation_if_exists",
              "macro.dbt.statement",
              "macro.dbt.get_create_view_as_sql",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants",
              "macro.dbt.persist_docs"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7712681,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.handle_existing_table": {
          "name": "handle_existing_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/helpers.sql",
          "original_file_path": "macros/materializations/models/view/helpers.sql",
          "unique_id": "macro.dbt.handle_existing_table",
          "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__handle_existing_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7715788,
          "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
          "name": "default__handle_existing_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/helpers.sql",
          "original_file_path": "macros/materializations/models/view/helpers.sql",
          "unique_id": "macro.dbt.default__handle_existing_table",
          "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.77179,
          "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
          "name": "create_or_replace_view",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/create_or_replace_view.sql",
          "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
          "unique_id": "macro.dbt.create_or_replace_view",
          "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.run_hooks",
              "macro.dbt.handle_existing_table",
              "macro.dbt.should_full_refresh",
              "macro.dbt.statement",
              "macro.dbt.get_create_view_as_sql",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.77324,
          "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
          "name": "get_create_view_as_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/create_view_as.sql",
          "original_file_path": "macros/materializations/models/view/create_view_as.sql",
          "unique_id": "macro.dbt.get_create_view_as_sql",
          "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_create_view_as_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.77365,
          "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
          "name": "default__get_create_view_as_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/create_view_as.sql",
          "original_file_path": "macros/materializations/models/view/create_view_as.sql",
          "unique_id": "macro.dbt.default__get_create_view_as_sql",
          "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.create_view_as"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.773816,
          "supported_languages": null
        },
        "macro.dbt.create_view_as": {
          "name": "create_view_as",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/create_view_as.sql",
          "original_file_path": "macros/materializations/models/view/create_view_as.sql",
          "unique_id": "macro.dbt.create_view_as",
          "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__create_view_as"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.773997,
          "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
          "name": "default__create_view_as",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/models/view/create_view_as.sql",
          "original_file_path": "macros/materializations/models/view/create_view_as.sql",
          "unique_id": "macro.dbt.default__create_view_as",
          "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_assert_columns_equivalent"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.77441,
          "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
          "name": "materialization_seed_default",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/seed.sql",
          "original_file_path": "macros/materializations/seeds/seed.sql",
          "unique_id": "macro.dbt.materialization_seed_default",
          "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
          "depends_on": {
            "macros": [
              "macro.dbt.should_full_refresh",
              "macro.dbt.run_hooks",
              "macro.dbt.reset_csv_table",
              "macro.dbt.create_csv_table",
              "macro.dbt.load_csv_rows",
              "macro.dbt.noop_statement",
              "macro.dbt.get_csv_sql",
              "macro.dbt.should_revoke",
              "macro.dbt.apply_grants",
              "macro.dbt.persist_docs",
              "macro.dbt.create_indexes"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.777695,
          "supported_languages": [
            "sql"
          ]
        },
        "macro.dbt.create_csv_table": {
          "name": "create_csv_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.create_csv_table",
          "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__create_csv_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.783019,
          "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
          "name": "default__create_csv_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__create_csv_table",
          "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7839181,
          "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
          "name": "reset_csv_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.reset_csv_table",
          "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__reset_csv_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.784151,
          "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
          "name": "default__reset_csv_table",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__reset_csv_table",
          "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.create_csv_table"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.784617,
          "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
          "name": "get_csv_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.get_csv_sql",
          "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_csv_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.784804,
          "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
          "name": "default__get_csv_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__get_csv_sql",
          "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.784936,
          "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
          "name": "get_binding_char",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.get_binding_char",
          "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_binding_char"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.78508,
          "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
          "name": "default__get_binding_char",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__get_binding_char",
          "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7851892,
          "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
          "name": "get_batch_size",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.get_batch_size",
          "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_batch_size"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.785341,
          "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
          "name": "default__get_batch_size",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__get_batch_size",
          "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.785462,
          "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
          "name": "get_seed_column_quoted_csv",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.get_seed_column_quoted_csv",
          "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.785931,
          "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
          "name": "load_csv_rows",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.load_csv_rows",
          "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__load_csv_rows"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.78612,
          "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
          "name": "default__load_csv_rows",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/materializations/seeds/helpers.sql",
          "original_file_path": "macros/materializations/seeds/helpers.sql",
          "unique_id": "macro.dbt.default__load_csv_rows",
          "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_batch_size",
              "macro.dbt.get_seed_column_quoted_csv",
              "macro.dbt.get_binding_char"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7874072,
          "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
          "name": "generate_alias_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_alias.sql",
          "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
          "unique_id": "macro.dbt.generate_alias_name",
          "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__generate_alias_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7878559,
          "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
          "name": "default__generate_alias_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_alias.sql",
          "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
          "unique_id": "macro.dbt.default__generate_alias_name",
          "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.78824,
          "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
          "name": "generate_schema_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_schema.sql",
          "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
          "unique_id": "macro.dbt.generate_schema_name",
          "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__generate_schema_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.788776,
          "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
          "name": "default__generate_schema_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_schema.sql",
          "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
          "unique_id": "macro.dbt.default__generate_schema_name",
          "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7890408,
          "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
          "name": "generate_schema_name_for_env",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_schema.sql",
          "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
          "unique_id": "macro.dbt.generate_schema_name_for_env",
          "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.789324,
          "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
          "name": "generate_database_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_database.sql",
          "original_file_path": "macros/get_custom_name/get_custom_database.sql",
          "unique_id": "macro.dbt.generate_database_name",
          "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__generate_database_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.78972,
          "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
          "name": "default__generate_database_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/get_custom_name/get_custom_database.sql",
          "original_file_path": "macros/get_custom_name/get_custom_database.sql",
          "unique_id": "macro.dbt.default__generate_database_name",
          "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.789969,
          "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
          "name": "default__test_relationships",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/generic_test_sql/relationships.sql",
          "original_file_path": "macros/generic_test_sql/relationships.sql",
          "unique_id": "macro.dbt.default__test_relationships",
          "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7903202,
          "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
          "name": "default__test_not_null",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/generic_test_sql/not_null.sql",
          "original_file_path": "macros/generic_test_sql/not_null.sql",
          "unique_id": "macro.dbt.default__test_not_null",
          "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.should_store_failures"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.790613,
          "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
          "name": "default__test_unique",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/generic_test_sql/unique.sql",
          "original_file_path": "macros/generic_test_sql/unique.sql",
          "unique_id": "macro.dbt.default__test_unique",
          "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.790858,
          "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
          "name": "default__test_accepted_values",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/generic_test_sql/accepted_values.sql",
          "original_file_path": "macros/generic_test_sql/accepted_values.sql",
          "unique_id": "macro.dbt.default__test_accepted_values",
          "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7916648,
          "supported_languages": null
        },
        "macro.dbt.statement": {
          "name": "statement",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/statement.sql",
          "original_file_path": "macros/etc/statement.sql",
          "unique_id": "macro.dbt.statement",
          "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.793149,
          "supported_languages": null
        },
        "macro.dbt.noop_statement": {
          "name": "noop_statement",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/statement.sql",
          "original_file_path": "macros/etc/statement.sql",
          "unique_id": "macro.dbt.noop_statement",
          "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.793797,
          "supported_languages": null
        },
        "macro.dbt.run_query": {
          "name": "run_query",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/statement.sql",
          "original_file_path": "macros/etc/statement.sql",
          "unique_id": "macro.dbt.run_query",
          "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.794084,
          "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
          "name": "convert_datetime",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/datetime.sql",
          "original_file_path": "macros/etc/datetime.sql",
          "unique_id": "macro.dbt.convert_datetime",
          "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.795933,
          "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
          "name": "dates_in_range",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/datetime.sql",
          "original_file_path": "macros/etc/datetime.sql",
          "unique_id": "macro.dbt.dates_in_range",
          "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.convert_datetime"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.797089,
          "supported_languages": null
        },
        "macro.dbt.partition_range": {
          "name": "partition_range",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/datetime.sql",
          "original_file_path": "macros/etc/datetime.sql",
          "unique_id": "macro.dbt.partition_range",
          "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.dates_in_range"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.797815,
          "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
          "name": "py_current_timestring",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/etc/datetime.sql",
          "original_file_path": "macros/etc/datetime.sql",
          "unique_id": "macro.dbt.py_current_timestring",
          "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.798042,
          "supported_languages": null
        },
        "macro.dbt.except": {
          "name": "except",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/except.sql",
          "original_file_path": "macros/utils/except.sql",
          "unique_id": "macro.dbt.except",
          "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__except"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.798261,
          "supported_languages": null
        },
        "macro.dbt.default__except": {
          "name": "default__except",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/except.sql",
          "original_file_path": "macros/utils/except.sql",
          "unique_id": "macro.dbt.default__except",
          "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.798333,
          "supported_languages": null
        },
        "macro.dbt.replace": {
          "name": "replace",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/replace.sql",
          "original_file_path": "macros/utils/replace.sql",
          "unique_id": "macro.dbt.replace",
          "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__replace"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.798649,
          "supported_languages": null
        },
        "macro.dbt.default__replace": {
          "name": "default__replace",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/replace.sql",
          "original_file_path": "macros/utils/replace.sql",
          "unique_id": "macro.dbt.default__replace",
          "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.798818,
          "supported_languages": null
        },
        "macro.dbt.concat": {
          "name": "concat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/concat.sql",
          "original_file_path": "macros/utils/concat.sql",
          "unique_id": "macro.dbt.concat",
          "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__concat"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7990541,
          "supported_languages": null
        },
        "macro.dbt.default__concat": {
          "name": "default__concat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/concat.sql",
          "original_file_path": "macros/utils/concat.sql",
          "unique_id": "macro.dbt.default__concat",
          "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.7991722,
          "supported_languages": null
        },
        "macro.dbt.length": {
          "name": "length",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/length.sql",
          "original_file_path": "macros/utils/length.sql",
          "unique_id": "macro.dbt.length",
          "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__length"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.799413,
          "supported_languages": null
        },
        "macro.dbt.default__length": {
          "name": "default__length",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/length.sql",
          "original_file_path": "macros/utils/length.sql",
          "unique_id": "macro.dbt.default__length",
          "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.79952,
          "supported_languages": null
        },
        "macro.dbt.dateadd": {
          "name": "dateadd",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/dateadd.sql",
          "original_file_path": "macros/utils/dateadd.sql",
          "unique_id": "macro.dbt.dateadd",
          "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__dateadd"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.79985,
          "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
          "name": "default__dateadd",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/dateadd.sql",
          "original_file_path": "macros/utils/dateadd.sql",
          "unique_id": "macro.dbt.default__dateadd",
          "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.800009,
          "supported_languages": null
        },
        "macro.dbt.intersect": {
          "name": "intersect",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/intersect.sql",
          "original_file_path": "macros/utils/intersect.sql",
          "unique_id": "macro.dbt.intersect",
          "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__intersect"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.800226,
          "supported_languages": null
        },
        "macro.dbt.default__intersect": {
          "name": "default__intersect",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/intersect.sql",
          "original_file_path": "macros/utils/intersect.sql",
          "unique_id": "macro.dbt.default__intersect",
          "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8003032,
          "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
          "name": "escape_single_quotes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/escape_single_quotes.sql",
          "original_file_path": "macros/utils/escape_single_quotes.sql",
          "unique_id": "macro.dbt.escape_single_quotes",
          "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__escape_single_quotes"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.800558,
          "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
          "name": "default__escape_single_quotes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/escape_single_quotes.sql",
          "original_file_path": "macros/utils/escape_single_quotes.sql",
          "unique_id": "macro.dbt.default__escape_single_quotes",
          "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.800697,
          "supported_languages": null
        },
        "macro.dbt.right": {
          "name": "right",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/right.sql",
          "original_file_path": "macros/utils/right.sql",
          "unique_id": "macro.dbt.right",
          "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__right"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.801055,
          "supported_languages": null
        },
        "macro.dbt.default__right": {
          "name": "default__right",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/right.sql",
          "original_file_path": "macros/utils/right.sql",
          "unique_id": "macro.dbt.default__right",
          "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.801406,
          "supported_languages": null
        },
        "macro.dbt.listagg": {
          "name": "listagg",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/listagg.sql",
          "original_file_path": "macros/utils/listagg.sql",
          "unique_id": "macro.dbt.listagg",
          "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__listagg"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.802231,
          "supported_languages": null
        },
        "macro.dbt.default__listagg": {
          "name": "default__listagg",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/listagg.sql",
          "original_file_path": "macros/utils/listagg.sql",
          "unique_id": "macro.dbt.default__listagg",
          "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.802721,
          "supported_languages": null
        },
        "macro.dbt.datediff": {
          "name": "datediff",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/datediff.sql",
          "original_file_path": "macros/utils/datediff.sql",
          "unique_id": "macro.dbt.datediff",
          "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__datediff"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8030798,
          "supported_languages": null
        },
        "macro.dbt.default__datediff": {
          "name": "default__datediff",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/datediff.sql",
          "original_file_path": "macros/utils/datediff.sql",
          "unique_id": "macro.dbt.default__datediff",
          "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.803242,
          "supported_languages": null
        },
        "macro.dbt.safe_cast": {
          "name": "safe_cast",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/safe_cast.sql",
          "original_file_path": "macros/utils/safe_cast.sql",
          "unique_id": "macro.dbt.safe_cast",
          "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__safe_cast"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.803518,
          "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
          "name": "default__safe_cast",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/safe_cast.sql",
          "original_file_path": "macros/utils/safe_cast.sql",
          "unique_id": "macro.dbt.default__safe_cast",
          "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.803652,
          "supported_languages": null
        },
        "macro.dbt.hash": {
          "name": "hash",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/hash.sql",
          "original_file_path": "macros/utils/hash.sql",
          "unique_id": "macro.dbt.hash",
          "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__hash"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.803896,
          "supported_languages": null
        },
        "macro.dbt.default__hash": {
          "name": "default__hash",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/hash.sql",
          "original_file_path": "macros/utils/hash.sql",
          "unique_id": "macro.dbt.default__hash",
          "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8040462,
          "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
          "name": "cast_bool_to_text",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/cast_bool_to_text.sql",
          "original_file_path": "macros/utils/cast_bool_to_text.sql",
          "unique_id": "macro.dbt.cast_bool_to_text",
          "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__cast_bool_to_text"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.804279,
          "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
          "name": "default__cast_bool_to_text",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/cast_bool_to_text.sql",
          "original_file_path": "macros/utils/cast_bool_to_text.sql",
          "unique_id": "macro.dbt.default__cast_bool_to_text",
          "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8044329,
          "supported_languages": null
        },
        "macro.dbt.any_value": {
          "name": "any_value",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/any_value.sql",
          "original_file_path": "macros/utils/any_value.sql",
          "unique_id": "macro.dbt.any_value",
          "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__any_value"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.804673,
          "supported_languages": null
        },
        "macro.dbt.default__any_value": {
          "name": "default__any_value",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/any_value.sql",
          "original_file_path": "macros/utils/any_value.sql",
          "unique_id": "macro.dbt.default__any_value",
          "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.804773,
          "supported_languages": null
        },
        "macro.dbt.position": {
          "name": "position",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/position.sql",
          "original_file_path": "macros/utils/position.sql",
          "unique_id": "macro.dbt.position",
          "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__position"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.805045,
          "supported_languages": null
        },
        "macro.dbt.default__position": {
          "name": "default__position",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/position.sql",
          "original_file_path": "macros/utils/position.sql",
          "unique_id": "macro.dbt.default__position",
          "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.805176,
          "supported_languages": null
        },
        "macro.dbt.string_literal": {
          "name": "string_literal",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/literal.sql",
          "original_file_path": "macros/utils/literal.sql",
          "unique_id": "macro.dbt.string_literal",
          "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__string_literal"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.805408,
          "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
          "name": "default__string_literal",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/literal.sql",
          "original_file_path": "macros/utils/literal.sql",
          "unique_id": "macro.dbt.default__string_literal",
          "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.805505,
          "supported_languages": null
        },
        "macro.dbt.type_string": {
          "name": "type_string",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_string",
          "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_string"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.80641,
          "supported_languages": null
        },
        "macro.dbt.default__type_string": {
          "name": "default__type_string",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_string",
          "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8065531,
          "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
          "name": "type_timestamp",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_timestamp",
          "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8067698,
          "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
          "name": "default__type_timestamp",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_timestamp",
          "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.806911,
          "supported_languages": null
        },
        "macro.dbt.type_float": {
          "name": "type_float",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_float",
          "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_float"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.807062,
          "supported_languages": null
        },
        "macro.dbt.default__type_float": {
          "name": "default__type_float",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_float",
          "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8072052,
          "supported_languages": null
        },
        "macro.dbt.type_numeric": {
          "name": "type_numeric",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_numeric",
          "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_numeric"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.807355,
          "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
          "name": "default__type_numeric",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_numeric",
          "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8075252,
          "supported_languages": null
        },
        "macro.dbt.type_bigint": {
          "name": "type_bigint",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_bigint",
          "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_bigint"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.807679,
          "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
          "name": "default__type_bigint",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_bigint",
          "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.807822,
          "supported_languages": null
        },
        "macro.dbt.type_int": {
          "name": "type_int",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_int",
          "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_int"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8079748,
          "supported_languages": null
        },
        "macro.dbt.default__type_int": {
          "name": "default__type_int",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_int",
          "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8081112,
          "supported_languages": null
        },
        "macro.dbt.type_boolean": {
          "name": "type_boolean",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.type_boolean",
          "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.default__type_boolean"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8082602,
          "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
          "name": "default__type_boolean",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/data_types.sql",
          "original_file_path": "macros/utils/data_types.sql",
          "unique_id": "macro.dbt.default__type_boolean",
          "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.808398,
          "supported_languages": null
        },
        "macro.dbt.array_concat": {
          "name": "array_concat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_concat.sql",
          "original_file_path": "macros/utils/array_concat.sql",
          "unique_id": "macro.dbt.array_concat",
          "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__array_concat"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.808661,
          "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
          "name": "default__array_concat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_concat.sql",
          "original_file_path": "macros/utils/array_concat.sql",
          "unique_id": "macro.dbt.default__array_concat",
          "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.808788,
          "supported_languages": null
        },
        "macro.dbt.bool_or": {
          "name": "bool_or",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/bool_or.sql",
          "original_file_path": "macros/utils/bool_or.sql",
          "unique_id": "macro.dbt.bool_or",
          "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__bool_or"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8090198,
          "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
          "name": "default__bool_or",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/bool_or.sql",
          "original_file_path": "macros/utils/bool_or.sql",
          "unique_id": "macro.dbt.default__bool_or",
          "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8091168,
          "supported_languages": null
        },
        "macro.dbt.last_day": {
          "name": "last_day",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/last_day.sql",
          "original_file_path": "macros/utils/last_day.sql",
          "unique_id": "macro.dbt.last_day",
          "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__last_day"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.809443,
          "supported_languages": null
        },
        "macro.dbt.default_last_day": {
          "name": "default_last_day",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/last_day.sql",
          "original_file_path": "macros/utils/last_day.sql",
          "unique_id": "macro.dbt.default_last_day",
          "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt.dateadd",
              "macro.dbt.date_trunc"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.809698,
          "supported_languages": null
        },
        "macro.dbt.default__last_day": {
          "name": "default__last_day",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/last_day.sql",
          "original_file_path": "macros/utils/last_day.sql",
          "unique_id": "macro.dbt.default__last_day",
          "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default_last_day"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8098402,
          "supported_languages": null
        },
        "macro.dbt.split_part": {
          "name": "split_part",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/split_part.sql",
          "original_file_path": "macros/utils/split_part.sql",
          "unique_id": "macro.dbt.split_part",
          "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__split_part"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.810354,
          "supported_languages": null
        },
        "macro.dbt.default__split_part": {
          "name": "default__split_part",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/split_part.sql",
          "original_file_path": "macros/utils/split_part.sql",
          "unique_id": "macro.dbt.default__split_part",
          "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.810574,
          "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
          "name": "_split_part_negative",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/split_part.sql",
          "original_file_path": "macros/utils/split_part.sql",
          "unique_id": "macro.dbt._split_part_negative",
          "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.810793,
          "supported_languages": null
        },
        "macro.dbt.date_trunc": {
          "name": "date_trunc",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/date_trunc.sql",
          "original_file_path": "macros/utils/date_trunc.sql",
          "unique_id": "macro.dbt.date_trunc",
          "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__date_trunc"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8110552,
          "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
          "name": "default__date_trunc",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/date_trunc.sql",
          "original_file_path": "macros/utils/date_trunc.sql",
          "unique_id": "macro.dbt.default__date_trunc",
          "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.811269,
          "supported_languages": null
        },
        "macro.dbt.array_construct": {
          "name": "array_construct",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_construct.sql",
          "original_file_path": "macros/utils/array_construct.sql",
          "unique_id": "macro.dbt.array_construct",
          "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__array_construct"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.811905,
          "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
          "name": "default__array_construct",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_construct.sql",
          "original_file_path": "macros/utils/array_construct.sql",
          "unique_id": "macro.dbt.default__array_construct",
          "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.812309,
          "supported_languages": null
        },
        "macro.dbt.array_append": {
          "name": "array_append",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_append.sql",
          "original_file_path": "macros/utils/array_append.sql",
          "unique_id": "macro.dbt.array_append",
          "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__array_append"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8127959,
          "supported_languages": null
        },
        "macro.dbt.default__array_append": {
          "name": "default__array_append",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/utils/array_append.sql",
          "original_file_path": "macros/utils/array_append.sql",
          "unique_id": "macro.dbt.default__array_append",
          "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.813053,
          "supported_languages": null
        },
        "macro.dbt.create_schema": {
          "name": "create_schema",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/schema.sql",
          "original_file_path": "macros/adapters/schema.sql",
          "unique_id": "macro.dbt.create_schema",
          "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__create_schema"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.813548,
          "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
          "name": "default__create_schema",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/schema.sql",
          "original_file_path": "macros/adapters/schema.sql",
          "unique_id": "macro.dbt.default__create_schema",
          "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.813737,
          "supported_languages": null
        },
        "macro.dbt.drop_schema": {
          "name": "drop_schema",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/schema.sql",
          "original_file_path": "macros/adapters/schema.sql",
          "unique_id": "macro.dbt.drop_schema",
          "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__drop_schema"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8139021,
          "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
          "name": "default__drop_schema",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/schema.sql",
          "original_file_path": "macros/adapters/schema.sql",
          "unique_id": "macro.dbt.default__drop_schema",
          "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.814094,
          "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
          "name": "current_timestamp",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.current_timestamp",
          "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__current_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8146,
          "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
          "name": "default__current_timestamp",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.default__current_timestamp",
          "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8147478,
          "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
          "name": "snapshot_get_time",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.snapshot_get_time",
          "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__snapshot_get_time"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.814889,
          "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
          "name": "default__snapshot_get_time",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.default__snapshot_get_time",
          "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.current_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8150022,
          "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
          "name": "current_timestamp_backcompat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.current_timestamp_backcompat",
          "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__current_timestamp_backcompat"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.815178,
          "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
          "name": "default__current_timestamp_backcompat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.default__current_timestamp_backcompat",
          "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.815254,
          "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
          "name": "current_timestamp_in_utc_backcompat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
          "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.815413,
          "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
          "name": "default__current_timestamp_in_utc_backcompat",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/timestamps.sql",
          "original_file_path": "macros/adapters/timestamps.sql",
          "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
          "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.current_timestamp_backcompat",
              "macro.dbt_postgres.postgres__current_timestamp_backcompat"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.815828,
          "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
          "name": "get_create_index_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/indexes.sql",
          "original_file_path": "macros/adapters/indexes.sql",
          "unique_id": "macro.dbt.get_create_index_sql",
          "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__get_create_index_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8162858,
          "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
          "name": "default__get_create_index_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/indexes.sql",
          "original_file_path": "macros/adapters/indexes.sql",
          "unique_id": "macro.dbt.default__get_create_index_sql",
          "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.816422,
          "supported_languages": null
        },
        "macro.dbt.create_indexes": {
          "name": "create_indexes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/indexes.sql",
          "original_file_path": "macros/adapters/indexes.sql",
          "unique_id": "macro.dbt.create_indexes",
          "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__create_indexes"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.816575,
          "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
          "name": "default__create_indexes",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/indexes.sql",
          "original_file_path": "macros/adapters/indexes.sql",
          "unique_id": "macro.dbt.default__create_indexes",
          "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_create_index_sql",
              "macro.dbt.run_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8169658,
          "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
          "name": "make_intermediate_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.make_intermediate_relation",
          "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_intermediate_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8204522,
          "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
          "name": "default__make_intermediate_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__make_intermediate_relation",
          "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__make_temp_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.820626,
          "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
          "name": "make_temp_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.make_temp_relation",
          "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_temp_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.820853,
          "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
          "name": "default__make_temp_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__make_temp_relation",
          "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.821161,
          "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
          "name": "make_backup_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.make_backup_relation",
          "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__make_backup_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.821425,
          "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
          "name": "default__make_backup_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__make_backup_relation",
          "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.821773,
          "supported_languages": null
        },
        "macro.dbt.drop_relation": {
          "name": "drop_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.drop_relation",
          "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__drop_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.821975,
          "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
          "name": "default__drop_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__drop_relation",
          "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.82221,
          "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
          "name": "truncate_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.truncate_relation",
          "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__truncate_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.822438,
          "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
          "name": "default__truncate_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__truncate_relation",
          "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8226109,
          "supported_languages": null
        },
        "macro.dbt.rename_relation": {
          "name": "rename_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.rename_relation",
          "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__rename_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.822816,
          "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
          "name": "default__rename_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__rename_relation",
          "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8231099,
          "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
          "name": "get_or_create_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.get_or_create_relation",
          "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_or_create_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.823458,
          "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
          "name": "default__get_or_create_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.default__get_or_create_relation",
          "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.824058,
          "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
          "name": "load_cached_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.load_cached_relation",
          "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.824307,
          "supported_languages": null
        },
        "macro.dbt.load_relation": {
          "name": "load_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.load_relation",
          "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.load_cached_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.824449,
          "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
          "name": "drop_relation_if_exists",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/relation.sql",
          "original_file_path": "macros/adapters/relation.sql",
          "unique_id": "macro.dbt.drop_relation_if_exists",
          "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.824651,
          "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
          "name": "collect_freshness",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/freshness.sql",
          "original_file_path": "macros/adapters/freshness.sql",
          "unique_id": "macro.dbt.collect_freshness",
          "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__collect_freshness"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.825096,
          "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
          "name": "default__collect_freshness",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/freshness.sql",
          "original_file_path": "macros/adapters/freshness.sql",
          "unique_id": "macro.dbt.default__collect_freshness",
          "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement",
              "macro.dbt.current_timestamp"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.825514,
          "supported_languages": null
        },
        "macro.dbt.copy_grants": {
          "name": "copy_grants",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.copy_grants",
          "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__copy_grants"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8273122,
          "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
          "name": "default__copy_grants",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__copy_grants",
          "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8274298,
          "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
          "name": "support_multiple_grantees_per_dcl_statement",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
          "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8275971,
          "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
          "name": "default__support_multiple_grantees_per_dcl_statement",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
          "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8277109,
          "supported_languages": null
        },
        "macro.dbt.should_revoke": {
          "name": "should_revoke",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.should_revoke",
          "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.copy_grants"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.828077,
          "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
          "name": "get_show_grant_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.get_show_grant_sql",
          "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__get_show_grant_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.828265,
          "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
          "name": "default__get_show_grant_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__get_show_grant_sql",
          "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.828365,
          "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
          "name": "get_grant_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.get_grant_sql",
          "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_grant_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.828595,
          "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
          "name": "default__get_grant_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__get_grant_sql",
          "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.828792,
          "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
          "name": "get_revoke_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.get_revoke_sql",
          "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_revoke_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8290198,
          "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
          "name": "default__get_revoke_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__get_revoke_sql",
          "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.829212,
          "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
          "name": "get_dcl_statement_list",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.get_dcl_statement_list",
          "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_dcl_statement_list"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.829451,
          "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
          "name": "default__get_dcl_statement_list",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__get_dcl_statement_list",
          "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.support_multiple_grantees_per_dcl_statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.830247,
          "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
          "name": "call_dcl_statements",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.call_dcl_statements",
          "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__call_dcl_statements"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8304498,
          "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
          "name": "default__call_dcl_statements",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__call_dcl_statements",
          "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.830708,
          "supported_languages": null
        },
        "macro.dbt.apply_grants": {
          "name": "apply_grants",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.apply_grants",
          "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__apply_grants"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.830949,
          "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
          "name": "default__apply_grants",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/apply_grants.sql",
          "original_file_path": "macros/adapters/apply_grants.sql",
          "unique_id": "macro.dbt.default__apply_grants",
          "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.run_query",
              "macro.dbt.get_show_grant_sql",
              "macro.dbt.get_dcl_statement_list",
              "macro.dbt.call_dcl_statements"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8321521,
          "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
          "name": "alter_column_comment",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.alter_column_comment",
          "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__alter_column_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.83292,
          "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
          "name": "default__alter_column_comment",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.default__alter_column_comment",
          "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.833096,
          "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
          "name": "alter_relation_comment",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.alter_relation_comment",
          "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__alter_relation_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.833295,
          "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
          "name": "default__alter_relation_comment",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.default__alter_relation_comment",
          "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8334599,
          "supported_languages": null
        },
        "macro.dbt.persist_docs": {
          "name": "persist_docs",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.persist_docs",
          "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__persist_docs"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.833725,
          "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
          "name": "default__persist_docs",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/persist_docs.sql",
          "original_file_path": "macros/adapters/persist_docs.sql",
          "unique_id": "macro.dbt.default__persist_docs",
          "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.run_query",
              "macro.dbt.alter_relation_comment",
              "macro.dbt.alter_column_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.83422,
          "supported_languages": null
        },
        "macro.dbt.get_catalog": {
          "name": "get_catalog",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.get_catalog",
          "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__get_catalog"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.83583,
          "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
          "name": "default__get_catalog",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.default__get_catalog",
          "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8361,
          "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
          "name": "information_schema_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.information_schema_name",
          "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__information_schema_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.836297,
          "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
          "name": "default__information_schema_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.default__information_schema_name",
          "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.836465,
          "supported_languages": null
        },
        "macro.dbt.list_schemas": {
          "name": "list_schemas",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.list_schemas",
          "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__list_schemas"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8366752,
          "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
          "name": "default__list_schemas",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.default__list_schemas",
          "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.information_schema_name",
              "macro.dbt.run_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8369339,
          "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
          "name": "check_schema_exists",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.check_schema_exists",
          "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__check_schema_exists"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.837153,
          "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
          "name": "default__check_schema_exists",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.default__check_schema_exists",
          "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.replace",
              "macro.dbt.run_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.837467,
          "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
          "name": "list_relations_without_caching",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.list_relations_without_caching",
          "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__list_relations_without_caching"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.837662,
          "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
          "name": "default__list_relations_without_caching",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/metadata.sql",
          "original_file_path": "macros/adapters/metadata.sql",
          "unique_id": "macro.dbt.default__list_relations_without_caching",
          "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.837833,
          "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
          "name": "get_columns_in_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.get_columns_in_relation",
          "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt_postgres.postgres__get_columns_in_relation"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.840092,
          "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
          "name": "default__get_columns_in_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__get_columns_in_relation",
          "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.840375,
          "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
          "name": "sql_convert_columns_in_relation",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.sql_convert_columns_in_relation",
          "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.840689,
          "supported_languages": null
        },
        "macro.dbt.get_empty_subquery_sql": {
          "name": "get_empty_subquery_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.get_empty_subquery_sql",
          "macro_sql": "{% macro get_empty_subquery_sql(select_sql) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_empty_subquery_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.840875,
          "supported_languages": null
        },
        "macro.dbt.default__get_empty_subquery_sql": {
          "name": "default__get_empty_subquery_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__get_empty_subquery_sql",
          "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8409832,
          "supported_languages": null
        },
        "macro.dbt.get_empty_schema_sql": {
          "name": "get_empty_schema_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.get_empty_schema_sql",
          "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_empty_schema_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8411598,
          "supported_languages": null
        },
        "macro.dbt.default__get_empty_schema_sql": {
          "name": "default__get_empty_schema_sql",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__get_empty_schema_sql",
          "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.841791,
          "supported_languages": null
        },
        "macro.dbt.get_column_schema_from_query": {
          "name": "get_column_schema_from_query",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.get_column_schema_from_query",
          "macro_sql": "{% macro get_column_schema_from_query(select_sql) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.get_empty_subquery_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8420942,
          "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
          "name": "get_columns_in_query",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.get_columns_in_query",
          "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__get_columns_in_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.842273,
          "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
          "name": "default__get_columns_in_query",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__get_columns_in_query",
          "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement",
              "macro.dbt.get_empty_subquery_sql"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8426208,
          "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
          "name": "alter_column_type",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.alter_column_type",
          "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__alter_column_type"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8428469,
          "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
          "name": "default__alter_column_type",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__alter_column_type",
          "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.statement"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.843426,
          "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
          "name": "alter_relation_add_remove_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.alter_relation_add_remove_columns",
          "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__alter_relation_add_remove_columns"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.843677,
          "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
          "name": "default__alter_relation_add_remove_columns",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/adapters/columns.sql",
          "original_file_path": "macros/adapters/columns.sql",
          "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
          "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.run_query"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8444328,
          "supported_languages": null
        },
        "macro.dbt.resolve_model_name": {
          "name": "resolve_model_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.resolve_model_name",
          "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__resolve_model_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.84613,
          "supported_languages": null
        },
        "macro.dbt.default__resolve_model_name": {
          "name": "default__resolve_model_name",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.default__resolve_model_name",
          "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8462799,
          "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
          "name": "build_ref_function",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.build_ref_function",
          "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.resolve_model_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.847094,
          "supported_languages": null
        },
        "macro.dbt.build_source_function": {
          "name": "build_source_function",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.build_source_function",
          "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.resolve_model_name"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.8475661,
          "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
          "name": "build_config_dict",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.build_config_dict",
          "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.848135,
          "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
          "name": "py_script_postfix",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.py_script_postfix",
          "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
          "depends_on": {
            "macros": [
              "macro.dbt.build_ref_function",
              "macro.dbt.build_source_function",
              "macro.dbt.build_config_dict",
              "macro.dbt.resolve_model_name",
              "macro.dbt.is_incremental",
              "macro.dbt.py_script_comment"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.848605,
          "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
          "name": "py_script_comment",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "macros/python_model/python.sql",
          "original_file_path": "macros/python_model/python.sql",
          "unique_id": "macro.dbt.py_script_comment",
          "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
          "depends_on": {
            "macros": []
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.848673,
          "supported_languages": null
        },
        "macro.dbt.test_unique": {
          "name": "test_unique",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "tests/generic/builtin.sql",
          "original_file_path": "tests/generic/builtin.sql",
          "unique_id": "macro.dbt.test_unique",
          "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__test_unique"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.849183,
          "supported_languages": null
        },
        "macro.dbt.test_not_null": {
          "name": "test_not_null",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "tests/generic/builtin.sql",
          "original_file_path": "tests/generic/builtin.sql",
          "unique_id": "macro.dbt.test_not_null",
          "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__test_not_null"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.849409,
          "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
          "name": "test_accepted_values",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "tests/generic/builtin.sql",
          "original_file_path": "tests/generic/builtin.sql",
          "unique_id": "macro.dbt.test_accepted_values",
          "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__test_accepted_values"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.849689,
          "supported_languages": null
        },
        "macro.dbt.test_relationships": {
          "name": "test_relationships",
          "resource_type": "macro",
          "package_name": "dbt",
          "path": "tests/generic/builtin.sql",
          "original_file_path": "tests/generic/builtin.sql",
          "unique_id": "macro.dbt.test_relationships",
          "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
          "depends_on": {
            "macros": [
              "macro.dbt.default__test_relationships"
            ]
          },
          "description": "",
          "meta": {},
          "docs": {
            "show": true,
            "node_color": null
          },
          "patch_path": null,
          "arguments": [],
          "created_at": 1684821563.849971,
          "supported_languages": null
        }
      },
      "docs": {
        "doc.jaffle_shop.__overview__": {
          "name": "__overview__",
          "resource_type": "doc",
          "package_name": "jaffle_shop",
          "path": "overview.md",
          "original_file_path": "models/overview.md",
          "unique_id": "doc.jaffle_shop.__overview__",
          "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."
        },
        "doc.jaffle_shop.orders_status": {
          "name": "orders_status",
          "resource_type": "doc",
          "package_name": "jaffle_shop",
          "path": "docs.md",
          "original_file_path": "models/docs.md",
          "unique_id": "doc.jaffle_shop.orders_status",
          "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"
        },
        "doc.dbt.__overview__": {
          "name": "__overview__",
          "resource_type": "doc",
          "package_name": "dbt",
          "path": "overview.md",
          "original_file_path": "docs/overview.md",
          "unique_id": "doc.dbt.__overview__",
          "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
      },
      "exposures": {},
      "metrics": {},
      "groups": {},
      "selectors": {},
      "disabled": {},
      "parent_map": {
        "model.jaffle_shop.customers": [
          "model.jaffle_shop.stg_customers",
          "model.jaffle_shop.stg_orders",
          "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.orders": [
          "model.jaffle_shop.stg_orders",
          "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.stg_customers": [
          "seed.jaffle_shop.raw_customers"
        ],
        "model.jaffle_shop.stg_payments": [
          "seed.jaffle_shop.raw_payments"
        ],
        "model.jaffle_shop.stg_orders": [
          "seed.jaffle_shop.raw_orders"
        ],
        "seed.jaffle_shop.raw_customers": [],
        "seed.jaffle_shop.raw_orders": [],
        "seed.jaffle_shop.raw_payments": [],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [
          "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [
          "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [
          "model.jaffle_shop.customers",
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": [
          "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [
          "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [
          "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [
          "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [
          "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [
          "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [
          "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [
          "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [
          "model.jaffle_shop.stg_payments"
        ]
      },
      "child_map": {
        "model.jaffle_shop.customers": [
          "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
          "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
          "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"
        ],
        "model.jaffle_shop.orders": [
          "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3",
          "test.jaffle_shop.not_null_orders_amount.106140f9fd",
          "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49",
          "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625",
          "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59",
          "test.jaffle_shop.not_null_orders_customer_id.c5f02694af",
          "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a",
          "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
          "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
          "test.jaffle_shop.unique_orders_order_id.fed79b3a6e"
        ],
        "model.jaffle_shop.stg_customers": [
          "model.jaffle_shop.customers",
          "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
          "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"
        ],
        "model.jaffle_shop.stg_payments": [
          "model.jaffle_shop.customers",
          "model.jaffle_shop.orders",
          "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
          "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
          "test.jaffle_shop.unique_stg_payments_payment_id.3744510712"
        ],
        "model.jaffle_shop.stg_orders": [
          "model.jaffle_shop.customers",
          "model.jaffle_shop.orders",
          "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
          "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
          "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"
        ],
        "seed.jaffle_shop.raw_customers": [
          "model.jaffle_shop.stg_customers"
        ],
        "seed.jaffle_shop.raw_orders": [
          "model.jaffle_shop.stg_orders"
        ],
        "seed.jaffle_shop.raw_payments": [
          "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [],
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": [],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [],
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [],
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": [],
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": [],
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": [],
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": [],
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": [],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": []
      },
      "group_map": {}
    },
    "run_results": {
      "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v4.json",
        "dbt_version": "1.5.0",
        "generated_at": "2023-05-30T02:43:32.128015Z",
        "invocation_id": "7177d929-4214-48c7-8954-5d7b26e848ed",
        "env": {}
      },
      "results": [
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.080762Z",
              "completed_at": "2023-05-30T02:43:31.080764Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.081305Z",
              "completed_at": "2023-05-30T02:43:31.187834Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.10842776298522949,
          "adapter_response": {
            "_message": "INSERT 100",
            "code": "INSERT",
            "rows_affected": 100
          },
          "message": "INSERT 100",
          "failures": null,
          "unique_id": "seed.jaffle_shop.raw_customers"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.190576Z",
              "completed_at": "2023-05-30T02:43:31.190577Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.191003Z",
              "completed_at": "2023-05-30T02:43:31.291458Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.10216808319091797,
          "adapter_response": {
            "_message": "INSERT 99",
            "code": "INSERT",
            "rows_affected": 99
          },
          "message": "INSERT 99",
          "failures": null,
          "unique_id": "seed.jaffle_shop.raw_orders"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.294158Z",
              "completed_at": "2023-05-30T02:43:31.294160Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.294579Z",
              "completed_at": "2023-05-30T02:43:31.399414Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.10637903213500977,
          "adapter_response": {
            "_message": "INSERT 113",
            "code": "INSERT",
            "rows_affected": 113
          },
          "message": "INSERT 113",
          "failures": null,
          "unique_id": "seed.jaffle_shop.raw_payments"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.402159Z",
              "completed_at": "2023-05-30T02:43:31.403922Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.404473Z",
              "completed_at": "2023-05-30T02:43:31.458987Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.057994842529296875,
          "adapter_response": {
            "_message": "CREATE VIEW",
            "code": "CREATE VIEW",
            "rows_affected": -1
          },
          "message": "CREATE VIEW",
          "failures": null,
          "unique_id": "model.jaffle_shop.stg_customers"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.461556Z",
              "completed_at": "2023-05-30T02:43:31.463274Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.463700Z",
              "completed_at": "2023-05-30T02:43:31.490330Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.029900074005126953,
          "adapter_response": {
            "_message": "CREATE VIEW",
            "code": "CREATE VIEW",
            "rows_affected": -1
          },
          "message": "CREATE VIEW",
          "failures": null,
          "unique_id": "model.jaffle_shop.stg_orders"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.493134Z",
              "completed_at": "2023-05-30T02:43:31.494899Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.495367Z",
              "completed_at": "2023-05-30T02:43:31.530445Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.03870892524719238,
          "adapter_response": {
            "_message": "CREATE VIEW",
            "code": "CREATE VIEW",
            "rows_affected": -1
          },
          "message": "CREATE VIEW",
          "failures": null,
          "unique_id": "model.jaffle_shop.stg_payments"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.533643Z",
              "completed_at": "2023-05-30T02:43:31.541785Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.542272Z",
              "completed_at": "2023-05-30T02:43:31.568445Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.03670930862426758,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.571699Z",
              "completed_at": "2023-05-30T02:43:31.575886Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.576396Z",
              "completed_at": "2023-05-30T02:43:31.590027Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.040361881256103516,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.614628Z",
              "completed_at": "2023-05-30T02:43:31.621406Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.621968Z",
              "completed_at": "2023-05-30T02:43:31.637646Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.024880170822143555,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.640864Z",
              "completed_at": "2023-05-30T02:43:31.643837Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.644324Z",
              "completed_at": "2023-05-30T02:43:31.655565Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.016483068466186523,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.658621Z",
              "completed_at": "2023-05-30T02:43:31.662901Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.663415Z",
              "completed_at": "2023-05-30T02:43:31.676832Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.020149946212768555,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.680269Z",
              "completed_at": "2023-05-30T02:43:31.684693Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.685220Z",
              "completed_at": "2023-05-30T02:43:31.705160Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.026764869689941406,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.708315Z",
              "completed_at": "2023-05-30T02:43:31.711072Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.711598Z",
              "completed_at": "2023-05-30T02:43:31.723663Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.01714015007019043,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.726797Z",
              "completed_at": "2023-05-30T02:43:31.730021Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.730550Z",
              "completed_at": "2023-05-30T02:43:31.744698Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.019638776779174805,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.747976Z",
              "completed_at": "2023-05-30T02:43:31.750045Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.750496Z",
              "completed_at": "2023-05-30T02:43:31.827194Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.08042192459106445,
          "adapter_response": {
            "_message": "SELECT 100",
            "code": "SELECT",
            "rows_affected": 100
          },
          "message": "SELECT 100",
          "failures": null,
          "unique_id": "model.jaffle_shop.customers"
        },
        {
          "status": "success",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.830094Z",
              "completed_at": "2023-05-30T02:43:31.832808Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.833259Z",
              "completed_at": "2023-05-30T02:43:31.868041Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.0392911434173584,
          "adapter_response": {
            "_message": "SELECT 99",
            "code": "SELECT",
            "rows_affected": 99
          },
          "message": "SELECT 99",
          "failures": null,
          "unique_id": "model.jaffle_shop.orders"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.870641Z",
              "completed_at": "2023-05-30T02:43:31.874380Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.874832Z",
              "completed_at": "2023-05-30T02:43:31.888339Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.019587039947509766,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.891777Z",
              "completed_at": "2023-05-30T02:43:31.894556Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.895065Z",
              "completed_at": "2023-05-30T02:43:31.906794Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.016701936721801758,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.909655Z",
              "completed_at": "2023-05-30T02:43:31.913838Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.914332Z",
              "completed_at": "2023-05-30T02:43:31.929296Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.02219700813293457,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.933235Z",
              "completed_at": "2023-05-30T02:43:31.936477Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.936956Z",
              "completed_at": "2023-05-30T02:43:31.949788Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.018758773803710938,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.953151Z",
              "completed_at": "2023-05-30T02:43:31.955854Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.956341Z",
              "completed_at": "2023-05-30T02:43:31.970539Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.019321918487548828,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.973891Z",
              "completed_at": "2023-05-30T02:43:31.977348Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.977861Z",
              "completed_at": "2023-05-30T02:43:31.988923Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.01679396629333496,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:31.991861Z",
              "completed_at": "2023-05-30T02:43:31.994749Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:31.995234Z",
              "completed_at": "2023-05-30T02:43:32.008580Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.01838827133178711,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:32.011447Z",
              "completed_at": "2023-05-30T02:43:32.014125Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:32.014567Z",
              "completed_at": "2023-05-30T02:43:32.025005Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.015152692794799805,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:32.027858Z",
              "completed_at": "2023-05-30T02:43:32.030796Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:32.031278Z",
              "completed_at": "2023-05-30T02:43:32.044839Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.018745899200439453,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:32.047828Z",
              "completed_at": "2023-05-30T02:43:32.052156Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:32.052659Z",
              "completed_at": "2023-05-30T02:43:32.066164Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.021128177642822266,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:32.070282Z",
              "completed_at": "2023-05-30T02:43:32.075343Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:32.075844Z",
              "completed_at": "2023-05-30T02:43:32.087049Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.021306991577148438,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2"
        },
        {
          "status": "pass",
          "timing": [
            {
              "name": "compile",
              "started_at": "2023-05-30T02:43:32.093338Z",
              "completed_at": "2023-05-30T02:43:32.099133Z"
            },
            {
              "name": "execute",
              "started_at": "2023-05-30T02:43:32.099748Z",
              "completed_at": "2023-05-30T02:43:32.113777Z"
            }
          ],
          "thread_id": "Thread-1 (worker)",
          "execution_time": 0.02223491668701172,
          "adapter_response": {
            "_message": "SELECT 1",
            "code": "SELECT",
            "rows_affected": 1
          },
          "message": null,
          "failures": 0,
          "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e"
        }
      ],
      "elapsed_time": 1.1599838733673096,
      "args": {
        "version_check": true,
        "quiet": false,
        "favor_state": false,
        "indirect_selection": "eager",
        "introspect": true,
        "log_format_file": "debug",
        "static_parser": true,
        "show": false,
        "warn_error_options": {
          "include": [],
          "exclude": []
        },
        "send_anonymous_usage_stats": true,
        "exclude": [],
        "vars": {},
        "which": "build",
        "cache_selected_only": false,
        "partial_parse": true,
        "defer": false,
        "print": true,
        "write_json": true,
        "printer_width": 80,
        "profiles_dir": "/Users/qrtt1/.dbt",
        "log_path": "/Users/qrtt1/temp/dbt-labs/jaffle_shop/logs",
        "macro_debugging": false,
        "log_format": "default",
        "populate_cache": true,
        "use_colors": true,
        "project_dir": "/Users/qrtt1/temp/dbt-labs/jaffle_shop",
        "use_colors_file": true,
        "log_level": "info",
        "enable_legacy_logger": false,
        "log_level_file": "debug",
        "select": [],
        "strict_mode": false,
        "resource_types": []
      }
    }
  },
  "id": "2a347c7c7bf94f09af911e045ece42aa",
  "created_at": "2023-05-23T05:59:35.604653Z",
  "datasource": {
    "name": "dev",
    "type": "postgres"
  },
  "version": "0.25.0.dev",
  "project_id": "6c0813238d364a689fe31862ede3537b",
  "user_id": "32e5d3ef2f894cd58adf27d160599555",
  "metadata_version": "1971e39ce02a6dff03c3e9b149d140a4"
}